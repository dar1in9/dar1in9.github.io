<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小歪的博客</title>
  <subtitle>人生苦短，我学Python</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangslob.github.io/"/>
  <updated>2018-12-18T12:43:18.455Z</updated>
  <id>https://zhangslob.github.io/</id>
  
  <author>
    <name>小歪</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MongoDB保存数据的优化方法</title>
    <link href="https://zhangslob.github.io/2018/12/18/MongoDB%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
    <id>https://zhangslob.github.io/2018/12/18/MongoDB保存数据的优化方法/</id>
    <published>2018-12-18T10:53:31.000Z</published>
    <updated>2018-12-18T12:43:18.455Z</updated>
    
    <content type="html"><![CDATA[<pre><code>这是崔斯特的第七十九篇原创文章
</code></pre><p>MongoDB保存数据的优化方法  (๑• . •๑)</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fyb6n6xo51j319o0owdjl.jpg" alt=""></p>
<a id="more"></a>
<p>这两天频繁遇到MongoDB插入数据的问题，这里记录下。</p>
<p>问题描述：我有多个线程在抓数据，每天数据里有含有多个文档（Document），使用Pymongo的插入方法，逐条插入。形如下</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_to_mongo</span><span class="params">(data)</span>:</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">        db.insert_one(i)</div></pre></td></tr></table></figure>
<p>在接收到数据后直接调用该方法即可。但是运维那边反馈，数据库压力比较大，让我修改。仔细想了想，可以使用<code>insert_many</code>方法。</p>
<p>插入可迭代的文档</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.test.count_documents(&#123;&#125;)</div><div class="line"><span class="number">0</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result = db.test.insert_many([&#123;<span class="string">'x'</span>: i&#125; <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>result.inserted_ids</div><div class="line">[ObjectId(<span class="string">'54f113fffba522406c9cc20e'</span>), ObjectId(<span class="string">'54f113fffba522406c9cc20f'</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>db.test.count_documents(&#123;&#125;)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<p>有几个参数需要了解</p>
<ul>
<li>documents: 可迭代文档</li>
<li>ordered :（可选）如果“True”（默认）文档将按顺序插入服务器，按提供的顺序。 如果发生错误，则中止所有剩余插入。 如果为“False”，文档将以任意顺序插入服务器，可能并行，并且将尝试所有文档插入。</li>
<li>bypass_document_validation: （可选）如果为“True”，则允许写入选择退出文档级别验证。 默认为“False”。</li>
<li>session (optional): a <a href="http://api.mongodb.com/python/current/api/pymongo/client_session.html#pymongo.client_session.ClientSession" target="_blank" rel="external"><code>ClientSession</code></a>.</li>
</ul>
<p>好了最简单的方法就是把所有需要保存的数据暂时存放在列表中，最后再插入。建议加上<code>ordered=False</code>参数，可以防止数据保存异常。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_mongo</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">while</span> len(tmp) &gt; <span class="number">100</span>:</div><div class="line">            <span class="keyword">try</span>:</div><div class="line">                c = db[collection_name]</div><div class="line">                c.insert_many(tmp, ordered=<span class="keyword">False</span>)</div><div class="line">                tmp.clear()</div><div class="line">            <span class="keyword">except</span> pymongo.errors.BulkWriteError:</div><div class="line">                tmp.clear()</div><div class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">                logging.error(<span class="string">'mongodb_save insert_many: &#123;&#125;, &#123;&#125;'</span>.format(e, tmp))</div><div class="line">        time.sleep(<span class="number">3</span>)</div><div class="line"></div><div class="line">tmp = []</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</div><div class="line">    tmp.append(i)</div><div class="line"></div><div class="line"></div><div class="line">t_save = threading.Thread(target=save_mongo)</div><div class="line">t_save.setDaemon(<span class="keyword">True</span>)</div><div class="line">t_save.start()</div></pre></td></tr></table></figure>
<p>新开一个线程去不停的检查，如果列表数据大于100，则批量插入，或者等待3秒。</p>
<p>这里捕获<code>pymongo.errors.BulkWriteError</code>异常，如果在<code>insert_many</code>时发生错误，会产生该异常。在我这里通常是插入重复数据引起的。</p>
<p>还有一种情况，是在多线程情况下。多个线程共享一个列表对象，肯定是需要加锁的，如果使用<code>Lock</code>来管理数据插入问题，需要去给列表加锁。之前还没用过锁，边去看看教程。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedCounter</span>:</span></div><div class="line">    <span class="string">'''</span></div><div class="line">    A counter object that can be shared by multiple threads.</div><div class="line">    '''</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, initial_value = <span class="number">0</span>)</span>:</span></div><div class="line">        self._value = initial_value</div><div class="line">        self._value_lock = threading.Lock()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">incr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        Increment the counter with locking</div><div class="line">        '''</div><div class="line">        self._value_lock.acquire()</div><div class="line">        self._value += delta</div><div class="line">        self._value_lock.release()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decr</span><span class="params">(self,delta=<span class="number">1</span>)</span>:</span></div><div class="line">        <span class="string">'''</span></div><div class="line">        Decrement the counter with locking</div><div class="line">        '''</div><div class="line">        self._value_lock.acquire()</div><div class="line">        self._value -= delta</div><div class="line">        self._value_lock.release()</div></pre></td></tr></table></figure>
<p>觉得太麻烦，可以将保存数据等方法封装成一个类对象，实例化一个列表，在每个线程中实例化一个类对象即可，这样多个线程中是不会共享列表数据的。</p>
<p>当然也可以使用另外一种数据结构：Queue队列。Queue是线程安全的，自带锁，使用的时候，不用对队列加锁操作。可以将数据暂时存入queue，然后用列表取出来，数量大于100则插入，并清空列表。</p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;这是崔斯特的第七十九篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;MongoDB保存数据的优化方法  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fyb6n6xo51j319o0owdjl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://zhangslob.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="https://zhangslob.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python堆排序之heapq</title>
    <link href="https://zhangslob.github.io/2018/12/05/Python%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B9%8Bheapq/"/>
    <id>https://zhangslob.github.io/2018/12/05/Python堆排序之heapq/</id>
    <published>2018-12-05T14:37:54.000Z</published>
    <updated>2018-12-17T11:24:01.444Z</updated>
    
    <content type="html"><![CDATA[<p>堆排序  (๑• . •๑)</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxwa1w3pt0j30i5080jrv.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十八篇原创文章</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="Python中的堆排序"><a href="#Python中的堆排序" class="headerlink" title="Python中的堆排序"></a>Python中的堆排序</h1><p>heapq模块实现了Python中的堆排序，并提供了有关方法。让用Python实现排序算法有了简单快捷的方式。</p>
<p>heapq的官方文档和源码：<a href="https://docs.python.org/3.0/library/heapq.html" target="_blank" rel="external">Heap queue algorithm</a></p>
<p>下面通过举例的方式说明heapq的应用方法</p>
<h1 id="实现堆排序"><a href="#实现堆排序" class="headerlink" title="实现堆排序"></a>实现堆排序</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> heapq <span class="keyword">import</span> *</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(iterable)</span>:</span></div><div class="line">    h = []</div><div class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> iterable:</div><div class="line">        heappush(h, value)</div><div class="line">    <span class="keyword">return</span> [heappop(h) <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(h))]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    print(heap_sort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">123</span>, <span class="number">4</span>, <span class="number">88</span>]))</div></pre></td></tr></table></figure>
<p>Output: <code>[1, 2, 3, 4, 5, 9, 88, 123]</code></p>
<p>下面说说几个主要方法</p>
<h3 id="heappush"><a href="#heappush" class="headerlink" title="heappush()"></a>heappush()</h3><p>heapq.heappush(heap, item):将item压入到堆数组heap中。如果不进行此步操作，后面的heappop()失效</p>
<h3 id="heappop"><a href="#heappop" class="headerlink" title="heappop()"></a>heappop()</h3><p>heapq.heappop(heap):从堆数组heap中取出最小的值，并返回。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>h = []                    <span class="comment">#定义一个list</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> heapq <span class="keyword">import</span> *     <span class="comment">#引入heapq模块</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, <span class="number">5</span>)               <span class="comment">#向堆中依次增加数值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, <span class="number">2</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h                           <span class="comment">#h的值</span></div><div class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)                  <span class="comment">#从h中删除最小的，并返回该值</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h.append(<span class="number">1</span>)                 <span class="comment">#注意，如果不是压入堆中，而是通过append追加一个数值</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h                           <span class="comment">#堆的函数并不能操作这个增加的数值，或者说它堆对来讲是不存在的</span></div><div class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)                  <span class="comment">#从h中能够找到的最小值是3,而不是1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, <span class="number">2</span>)               <span class="comment">#这时，不仅将2压入到堆内，而且1也进入了堆。</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)                  <span class="comment">#操作对象已经包含了1</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="heapq-heappushpop-heap-item"><a href="#heapq-heappushpop-heap-item" class="headerlink" title="heapq.heappushpop(heap, item)"></a>heapq.heappushpop(heap, item)</h3><p>是上述heappush和heappop的合体，同时完成两者的功能.注意：相当于先操作了heappush(heap,item),然后操作heappop(heap)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappushpop(h, <span class="number">4</span>)            <span class="comment">#增加4同时删除最小值2并返回该最小值，与下列操作等同：</span></div><div class="line"><span class="number">2</span>                               <span class="comment">#heappush(h,4),heappop(h)</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>h</div><div class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>]</div></pre></td></tr></table></figure>
<h3 id="heapq-heapify-x"><a href="#heapq-heapify-x" class="headerlink" title="heapq.heapify(x)"></a>heapq.heapify(x)</h3><p>x必须是list，此函数将list变成堆，实时操作。从而能够在任何情况下使用堆的函数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapify(a)                  <span class="comment">#将a变成堆之后，可以对其操作</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(a)</div><div class="line"><span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>]                   <span class="comment">#b不是堆，如果对其进行操作，显示结果如下</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(b)                  <span class="comment">#按照顺序，删除第一个数值并返回,不会从中挑选出最小的</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapify(b)                  <span class="comment">#变成堆之后，再操作</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(b)</div><div class="line"><span class="number">2</span></div></pre></td></tr></table></figure>
<h3 id="heapq-heapreplace-heap-item"><a href="#heapq-heapreplace-heap-item" class="headerlink" title="heapq.heapreplace(heap, item)"></a>heapq.heapreplace(heap, item)</h3><p>是heappop(heap)和heappush(heap,item)的联合操作。注意，与heappushpop(heap,item)的区别在于，顺序不同，这里是先进行删除，后压入堆</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = []</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapreplace(a, <span class="number">3</span>)            <span class="comment">#如果list空，则报错</span></div><div class="line">Traceback (most recent call last):</div><div class="line">File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">IndexError: index out of range</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(a, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapreplace(a, <span class="number">2</span>)            <span class="comment">#先执行删除（heappop(a)-&gt;3),再执行加入（heappush(a, 2))</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(a, <span class="number">5</span>)  </div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(a, <span class="number">9</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(a, <span class="number">4</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">5</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapreplace(a, <span class="number">6</span>)            <span class="comment">#先从堆a中找出最小值并返回，然后加入6</span></div><div class="line"><span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>heapreplace(a, <span class="number">1</span>)            <span class="comment">#1是后来加入的，在1加入之前，a中的最小值是4</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">6</span>]</div></pre></td></tr></table></figure>
<h3 id="heapq-merge-iterables"><a href="#heapq-merge-iterables" class="headerlink" title="heapq.merge(*iterables)"></a>heapq.merge(*iterables)</h3><p>举例：</p>
<pre><code>&gt;&gt;&gt; a = [2, 4, 6]         
&gt;&gt;&gt; b = [1, 3, 5]
&gt;&gt;&gt; c = merge(a, b)
&gt;&gt;&gt; list(c)
[1, 2, 3, 4, 5, 6]
</code></pre><p>在<a href="https://github.com/qiwsir/algorithm/blob/master/merge_sort.md" target="_blank" rel="external">归并排序</a>中详细演示了本函数的使用方法。</p>
<h3 id="heapq-nlargest-n-iterable-key-heapq-nsmallest-n-iterable-key"><a href="#heapq-nlargest-n-iterable-key-heapq-nsmallest-n-iterable-key" class="headerlink" title="heapq.nlargest(n, iterable[, key]),heapq.nsmallest(n, iterable[, key])"></a>heapq.nlargest(n, iterable[, key]),heapq.nsmallest(n, iterable[, key])</h3><p>获取列表中最大、最小的几个值。</p>
<pre><code>&gt;&gt;&gt; a   
[2, 4, 6]
&gt;&gt;&gt; nlargest(2,a)
[6, 4]
</code></pre><h1 id="数组中的第K个最大元素"><a href="#数组中的第K个最大元素" class="headerlink" title="数组中的第K个最大元素"></a>数组中的第K个最大元素</h1><p>其实以上说了那么多，只是为了说这道题。</p>
<p>在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,1,5,6,4] 和 k = 2</div><div class="line">输出: 5</div></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: [3,2,3,1,2,4,5,5,6] 和 k = 4</div><div class="line">输出: 4</div></pre></td></tr></table></figure>
<p><strong>说明:</strong></p>
<p>你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。</p>
<p>这里不说别的解法。当然面试中你肯定不能这么写，但这是一个很好的思路</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type k: int</div><div class="line">        :rtype: int</div><div class="line">        """</div><div class="line">        <span class="keyword">import</span> heapq </div><div class="line">        heapq.heapify(nums) </div><div class="line">        <span class="keyword">return</span> heapq.nlargest(k, nums)[<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p>看到有人用<code>return sorted(nums)[-k]</code>，真的要被气死了。</p>
<p>参考 <a href="https://github.com/qiwsir/algorithm/blob/master/heapq.md" target="_blank" rel="external">https://github.com/qiwsir/algorithm/blob/master/heapq.md</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;堆排序  (๑• . •๑)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fxwa1w3pt0j30i5080jrv.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十八篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="heapq" scheme="https://zhangslob.github.io/tags/heapq/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊足球</title>
    <link href="https://zhangslob.github.io/2018/12/04/%E8%81%8A%E4%B8%80%E8%81%8A%E8%B6%B3%E7%90%83/"/>
    <id>https://zhangslob.github.io/2018/12/04/聊一聊足球/</id>
    <published>2018-12-04T10:12:13.000Z</published>
    <updated>2018-12-04T14:30:14.142Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxv2qe0vikj30dw098jse.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十七篇原创文章</div></pre></td></tr></table></figure>
<p>喜爱足球  (๑• . •๑)</p>
<a id="more"></a>
<p>以后除了技术还会聊点别的，这次就来聊聊我的爱好之一——足球。这里主要是说看球，看球以前主要看西甲，现在主要看意甲，C罗铁粉。</p>
<p>我是从高中开始喜欢足球，那时候选的文科嘛，然后男生又少，全班11人，大家都去踢球，就慢慢爱上了这个运动。大学时参加了院队，可惜自己技术太水，始终在打酱油，大二就退队了，以后就只看看球。</p>
<p>这里介绍下梅西和C罗，当今最顶尖的两位球员。如果你要问谁更厉害，我觉得这个问题就和PHP和Java谁是世界上最好的语言一样。我喜欢C罗，同时也敬佩梅西，两人各有伟大之处，创造无数记录，各夺得了5次金球奖。</p>
<p>说到金球奖，就不得不说今天的金球奖得主——莫德里奇了。其实我觉得既然都已经是事实了，再去说别人怎么怎么水，没意思。对于梅罗来说，这可能是最好的结局，双方各获奖5次，打了个平手，挺好的。我最受不了的是某些球迷，天天骂来骂去，只是为了争论自己心中谁才是历史最佳，这种行为真的很无聊，有这个时间还不如多写写代码。</p>
<p>看篮球与看足球有很多不同，因为篮球进球太容易，而足球打90分钟0：0是很正常的，半夜看球有时候会很困，不过足球仍然是世界第一运动。世界杯上有一场比赛超级经典，是葡萄牙3-3西班牙那场，来看看<a href="https://v.qq.com/x/page/p0703fedijp.html" target="_blank" rel="external">https://v.qq.com/x/page/p0703fedijp.html</a></p>
<p>喜欢C罗不仅是因为进球多，也因为他的职业态度。他的职业态度是行业内任何人都不会怀疑的，求胜的欲望，好胜的心理，使得C罗一直都兢兢业业的训练着，即使是休赛期间，C罗也会仍然坚持每天锻炼。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxv2ty8ym7j30ho0bnwgv.jpg" alt=""></p>
<blockquote>
<p>各个时期的C罗肌肉</p>
</blockquote>
<p>最后，说说如何看球。现在基本上都可以在pp体育上看，但是有些是会员场。有时候CCTV5也会有转播，上周末就转播意甲尤文3-0弗洛伦萨那场。还有龙珠直播的体育频道，经常会有小主播转播比赛，然后不停地叫你加微信。。</p>
<p>最后想说，趁着年轻能熬夜多看看，以后估计就没精神了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fxv2qe0vikj30dw098jse.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十七篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;喜爱足球  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="爱好" scheme="https://zhangslob.github.io/categories/%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="足球" scheme="https://zhangslob.github.io/tags/%E8%B6%B3%E7%90%83/"/>
    
  </entry>
  
  <entry>
    <title>说一道排序题</title>
    <link href="https://zhangslob.github.io/2018/11/27/%E8%AF%B4%E4%B8%80%E9%81%93%E6%8E%92%E5%BA%8F%E9%A2%98/"/>
    <id>https://zhangslob.github.io/2018/11/27/说一道排序题/</id>
    <published>2018-11-27T11:16:12.982Z</published>
    <updated>2018-11-27T13:47:25.971Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxmyfbq0lgj311r0u0n0l.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十六篇原创文章</div></pre></td></tr></table></figure>
<p>很经典的排序问题  (๑• . •๑)</p>
<a id="more"></a>
<p>先看题目，“前K个高频元素”</p>
<p>给定一个非空的整数数组，返回其中出现频率前 <strong>k</strong> 高的元素。</p>
<p><strong>示例 1:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: nums = [1,1,1,2,2,3], k = 2</div><div class="line">输出: [1,2]</div></pre></td></tr></table></figure>
<p><strong>示例 2:</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输入: nums = [1], k = 1</div><div class="line">输出: [1]</div></pre></td></tr></table></figure>
<h1 id="简单解法"><a href="#简单解法" class="headerlink" title="简单解法"></a>简单解法</h1><p>这题很简单，两步：</p>
<ol>
<li>用字典保存数字及其出现的对应频率</li>
<li>排序</li>
</ol>
<p>那么第一步就不用说了，很简单</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">m = dict()</div><div class="line"><span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">    <span class="keyword">if</span> num <span class="keyword">in</span> m:</div><div class="line">        m[num] += <span class="number">1</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        m[num] = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>有趣的就在第二步，排序。很多人都是使用内置库<code>sorted</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type k: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        m = dict()</div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> m:</div><div class="line">                m[num] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                m[num] = <span class="number">1</span></div><div class="line"></div><div class="line">        output = sorted(m.items(), key=<span class="keyword">lambda</span> e: e[<span class="number">1</span>], reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        final = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</div><div class="line">            final.append(output[i][<span class="number">0</span>])</div><div class="line">        <span class="keyword">return</span> final</div></pre></td></tr></table></figure>
<p>最简洁的代码是直接使用Python内置的<code>collections</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type k: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        <span class="keyword">import</span> collections</div><div class="line">        counter = collections.Counter(nums)</div><div class="line">        <span class="keyword">return</span> [item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> counter.most_common(k)]</div></pre></td></tr></table></figure>
<p>这真是是我们想要的吗？并不是。我们的目标是不使用任何内置库。</p>
<h1 id="sorted原理"><a href="#sorted原理" class="headerlink" title="sorted原理"></a>sorted原理</h1><p>关于Python的sorted排序算法，这篇文章讲的比较详细：<a href="https://www.cnblogs.com/clement-jiao/articles/9243066.html" target="_blank" rel="external">python sort函数内部实现原理</a>，说到Python使用的是著名的<code>Timesort</code>算法。</p>
<p><code>Timsort</code>是结合了合并排序（merge sort）和插入排序（insertion sort）而得出的排序算法，它在现实中有很好的效率。</p>
<p>Tim Peters在2002年设计了该算法并在Python中使用（TimSort 是 Python 中 list.sort 的默认实现）。该算法找到数据中已经排好序的块-分区，每一个分区叫一个run，然后按规则合并这些run。Pyhton自从2.3版以来一直采用Timsort算法排序，现在Java SE7和Android也采用Timsort算法对数组排序。</p>
<p>如果想自己用Python来写一个排序算法，完成本题要求该如何写？也就是对这个字典进行排序，<code>{5: 1, 1: 3, 4: 1, 2: 2, 3: 1}</code>，有什么好办法。</p>
<p>思路可以是两个指针遍历字典，如果左边大于右边，则替换位置。</p>
<h1 id="更好的方法"><a href="#更好的方法" class="headerlink" title="更好的方法"></a>更好的方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">topKFrequent</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        <span class="string">"""</span></div><div class="line">        :type nums: List[int]</div><div class="line">        :type k: int</div><div class="line">        :rtype: List[int]</div><div class="line">        """</div><div class="line">        m = dict()</div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> m:</div><div class="line">                m[num] += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                m[num] = <span class="number">1</span></div><div class="line">        bucket = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> range(len(nums) + <span class="number">1</span>)]</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> m.items():</div><div class="line">            bucket[value].append(key)</div><div class="line">        </div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums), <span class="number">0</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> bucket[i]:</div><div class="line">                result.append(n)</div><div class="line">                <span class="keyword">if</span> len(result) == k:</div><div class="line">                    <span class="keyword">return</span> result</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<p>很巧妙的使用列表的索引来保存value。</p>
<p>此时bucket值是<code>[[], [5, 4, 3], [2], [1], [], [], [], [], []]</code>，索引即出现次数。</p>
<p>此解法用时72ms，战胜 50.84 % 的 python3 提交记录。但是看了排在前面的算法，都是使用的Python内置的<code>collections</code>。</p>
<p>如果是你，会用什么方法呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fxmyfbq0lgj311r0u0n0l.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十六篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;很经典的排序问题  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>用node来DNS抓包</title>
    <link href="https://zhangslob.github.io/2018/11/22/%E7%94%A8node%E6%9D%A5DNS%E6%8A%93%E5%8C%85/"/>
    <id>https://zhangslob.github.io/2018/11/22/用node来DNS抓包/</id>
    <published>2018-11-22T11:16:39.412Z</published>
    <updated>2018-11-22T11:18:11.596Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxh2063t84j30m805zq38.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十四篇原创文章</div></pre></td></tr></table></figure>
<p>用node来DNS抓包  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h1><p>安装node，并安装依赖，去<code>server.js</code>同级目录下安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install native-dns</div><div class="line">npm install async</div></pre></td></tr></table></figure>
<p>保存以下文件为<code>server.js</code>：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> dns = <span class="built_in">require</span>(<span class="string">'native-dns'</span>);</div><div class="line"><span class="keyword">let</span> server = dns.createServer();</div><div class="line"></div><div class="line"><span class="keyword">let</span> authority = &#123; <span class="attr">address</span>: <span class="string">'114.114.114.114'</span>, <span class="attr">port</span>: <span class="number">53</span>, <span class="attr">type</span>: <span class="string">'udp'</span> &#125;;</div><div class="line"></div><div class="line">server.on(<span class="string">'listening'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'server listening on'</span>, server.address()));</div><div class="line">server.on(<span class="string">'close'</span>, () =&gt; <span class="built_in">console</span>.log(<span class="string">'server closed'</span>, server.address()));</div><div class="line">server.on(<span class="string">'error'</span>, (err, buff, req, res) =&gt; <span class="built_in">console</span>.error(err.stack));</div><div class="line">server.on(<span class="string">'socketError'</span>, (err, socket) =&gt; <span class="built_in">console</span>.error(err));</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">question, response, cb</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'proxying'</span>, question.name);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> request = dns.Request(&#123;</div><div class="line">    <span class="attr">question</span>: question, <span class="comment">// forwarding the question</span></div><div class="line">    server: authority,  <span class="comment">// this is the DNS server we are asking</span></div><div class="line">    timeout: <span class="number">1000</span></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// when we get answers, append them to the response</span></div><div class="line">  request.on(<span class="string">'message'</span>, (err, msg) =&gt; &#123;</div><div class="line">    msg.answer.forEach(<span class="function"><span class="params">a</span> =&gt;</span> response.answer.push(a));</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  request.on(<span class="string">'end'</span>, cb);</div><div class="line">  request.send();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> entries = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">domain</span>: <span class="string">"^weixin.keruyun.com*"</span>,</div><div class="line">    <span class="attr">records</span>: [</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"A"</span>, <span class="attr">address</span>: <span class="string">"10.10.10.90"</span>, <span class="attr">ttl</span>: <span class="number">1800</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRequest</span>(<span class="params">request, response</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'request from'</span>, request.address.address, <span class="string">'for'</span>, request.question[<span class="number">0</span>].name);</div><div class="line"></div><div class="line">  <span class="keyword">let</span> f = [];</div><div class="line"></div><div class="line">  request.question.forEach(<span class="function"><span class="params">question</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> entry = entries.filter(<span class="function"><span class="params">r</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(r.domain, <span class="string">'i'</span>).exec(question.name));</div><div class="line">    <span class="keyword">if</span> (entry.length) &#123;</div><div class="line">      entry[<span class="number">0</span>].records.forEach(<span class="function"><span class="params">record</span> =&gt;</span> &#123;</div><div class="line">        record.name = question.name;</div><div class="line">        record.ttl = record.ttl || <span class="number">1800</span>;</div><div class="line">        response.answer.push(dns[record.type](record));</div><div class="line">      &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      f.push(<span class="function"><span class="params">cb</span> =&gt;</span> proxy(question, response, cb));</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">async</span>.parallel(f, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; response.send(); &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">server.on(<span class="string">'request'</span>, handleRequest);</div><div class="line"></div><div class="line"></div><div class="line">server.serve(<span class="number">53</span>);</div></pre></td></tr></table></figure>
<p>手机wifi设置如下：</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwcjnzgmwfj30u01hcdi1.jpg" alt=""></p>
<p>在DNS1和DNS2，都设置为电脑端地址</p>
<h1 id="找到域名"><a href="#找到域名" class="headerlink" title="找到域名"></a>找到域名</h1><p>使用命名<code>node server.js</code>运行js文件，手机打开飞行模式，再关闭飞行模式，关闭手机所有应用后，打开目标应用，查看输出</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">request from 10.10.10.30 <span class="keyword">for</span> api.huoshan.com</div><div class="line">proxying api.huoshan.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> api.huoshan.com</div><div class="line">proxying api.huoshan.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> sf3-ttcdn-tos.pstatp.com</div><div class="line">proxying sf3-ttcdn-tos.pstatp.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> nbsdk-baichuan.alicdn.com</div><div class="line">proxying nbsdk-baichuan.alicdn.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> sf1-hscdn-tos.pstatp.com</div><div class="line">proxying sf1-hscdn-tos.pstatp.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> wgo.mmstat.com</div><div class="line">proxying wgo.mmstat.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> v7.pstatp.com</div><div class="line">proxying v7.pstatp.com</div><div class="line">request from 10.10.10.30 <span class="keyword">for</span> sf1-ttcdn-tos.pstatp.com</div><div class="line">proxying sf1-ttcdn-tos.pstatp.com</div></pre></td></tr></table></figure>
<p>找到自己想要抓取的域名，假设现在我们想抓取的域名是<code>superapp.kiwa-tech.com</code>，修改<code>server.js</code>文件，如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> entries = [</div><div class="line">  &#123;</div><div class="line">    <span class="attr">domain</span>: <span class="string">"^superapp.kiwa-tech.com*"</span>,</div><div class="line">    <span class="attr">records</span>: [</div><div class="line">      &#123; <span class="attr">type</span>: <span class="string">"A"</span>, <span class="attr">address</span>: <span class="string">"10.10.10.90"</span>, <span class="attr">ttl</span>: <span class="number">1800</span> &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">];</div></pre></td></tr></table></figure>
<h1 id="配置Charles"><a href="#配置Charles" class="headerlink" title="配置Charles"></a>配置Charles</h1><p>打开Charles，注意，要使用<code>sudo</code>打开，<code>sudo /Applications/Charles.app/Contents/MacOS/Charles</code></p>
<ol>
<li>安装证书，手机端也要安装</li>
<li>打开ssl proxying</li>
<li>Reverse Proxies，设置如下</li>
</ol>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fwcjxk01hcj30ez09agm6.jpg" alt=""></p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>最后就大功告成了，此时在手机端打开该App，即可查看相关DNS抓包数据。</p>
<p>这种方法叫做DNS抓包</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fxh2063t84j30m805zq38.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十四篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用node来DNS抓包  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>App爬虫思路</title>
    <link href="https://zhangslob.github.io/2018/11/22/App%E7%88%AC%E8%99%AB%E6%80%9D%E8%B7%AF/"/>
    <id>https://zhangslob.github.io/2018/11/22/App爬虫思路/</id>
    <published>2018-11-22T10:05:51.320Z</published>
    <updated>2018-11-22T11:14:55.795Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh168kfnjj30sy0gkjsx.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十五篇原创文章</div></pre></td></tr></table></figure>
<p>App爬虫  (๑• . •๑)</p>
<a id="more"></a>
<p>看图一点点介绍</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxh168kfnjj30sy0gkjsx.jpg" alt=""></p>
<h1 id="评估分析"><a href="#评估分析" class="headerlink" title="评估分析"></a>评估分析</h1><p>在抓包前，建议一定要先分析。</p>
<p>有网页端抓网页端、有移动端抓移动端、有客户端抓客户端，最后的选择才是App。</p>
<p>举个例子。针对腾讯视频考虑顺序：</p>
<ol>
<li>网页端：<code>https://v.qq.com/</code></li>
<li>移动端：<code>https://m.v.qq.com/index.html</code></li>
<li>客户端：通过charles设置代理抓取</li>
<li>App</li>
</ol>
<p>腾讯自己就有做应用加固的，旗下产品自然很难被编译</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxh103v492j30qs0mwn16.jpg" alt=""></p>
<blockquote>
<p>如果你能编译腾讯旗下App，请告诉我方法</p>
</blockquote>
<h1 id="如何抓包"><a href="#如何抓包" class="headerlink" title="如何抓包"></a>如何抓包</h1><p>在知乎上也有这个问题 <a href="https://www.zhihu.com/question/20467503" target="_blank" rel="external">如何在 Android 手机上实现抓包？</a></p>
<p>但是我觉得不够全，首先对于一般的HTTP和HTTPS协议，通过最基本的Fiddler和Charles就可以抓包，具体方法请Google。需要保证两点：App走代理，证书被信任。</p>
<p>有些应用不走操作系统的 HTTP 代理，直接走 TCP 协议，无法使用 HTTP 代理抓包。虽然 Charles 支持 SOCKS 代理，但无法分析 TCP 包。这就需要祭出大杀器 <a href="http://www.tcpdump.org/" target="_blank" rel="external">tcpdump</a> 和 <a href="https://www.wireshark.org/" target="_blank" rel="external">Wireshark</a> 。</p>
<p>说一下DNS抓包，。这个网上基本找不到资料，这也是大佬教我的，详细步骤在博客里，感兴趣自行翻阅。</p>
<p>还有一个比较出名的是mitmproxy，没怎么用过。</p>
<p>最后，苹果公司有做一个比较详细的抓包说明</p>
<p><a href="https://developer.apple.com/library/archive/qa/qa1176/_index.html" target="_blank" rel="external">https://developer.apple.com/library/archive/qa/qa1176/_index.html</a></p>
<h1 id="如何逆向"><a href="#如何逆向" class="headerlink" title="如何逆向"></a>如何逆向</h1><p>逆向一直是一个很大的话题，而且还专门有逆向工程师这个职位，可见其中水之深。</p>
<p>对于爬虫，简单了解即可。这里需要三个逆向工具：</p>
<ol>
<li>Apktool：获取资源文件和smail代码</li>
<li>dex2jar：将dex文件转换成jar文件</li>
<li>JD-GUI：查看到反编译后的dex的代码</li>
</ol>
<p>最后看到的是JAVA代码，所以能看懂JAVA是必要能力。</p>
<p>JD-GUI我用的比较多，简单演示下。</p>
<p>主要是使用搜索功能，搜索前需要先花很多时间反编译。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxh1q8df4ij31hc0rhjyo.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fxh168kfnjj30sy0gkjsx.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十五篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;App爬虫  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>神经网络基础及Keras入门</title>
    <link href="https://zhangslob.github.io/2018/11/20/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E5%8F%8AKeras%E5%85%A5%E9%97%A8/"/>
    <id>https://zhangslob.github.io/2018/11/20/神经网络基础及Keras入门/</id>
    <published>2018-11-20T11:24:23.599Z</published>
    <updated>2018-11-20T14:09:44.492Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxeukkzw5cj30d607aq3p.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十三篇原创文章</div></pre></td></tr></table></figure>
<p>深度学习  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="神经网络定义"><a href="#神经网络定义" class="headerlink" title="神经网络定义"></a>神经网络定义</h1><p>人工神经网络，简称神经网络，在机器学习和认知科学领域，是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）的结构和功能的数学模型或计算模型，用于对函数进行估计或近似。</p>
<p>为了描述神经网络，我们先从最简单的神经网络讲起，这个神经网络仅由一个“神经元”构成，以下即是这个“神经元”的图示：</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxeuxewrw8j30m80ayaam.jpg" alt=""></p>
<p>这个“神经元”是一个以 <img src="http://ufldl.stanford.edu/wiki/images/math/3/c/b/3cb2ab026a8bb3279a30485c2220a5a4.png" alt="\textstyle x_1, x_2, x_3"> 及截距 <img src="http://ufldl.stanford.edu/wiki/images/math/d/c/b/dcb8dd3d14a2c0aa9b06ec6ce4ec0d59.png" alt="\textstyle +1"> 为输入值的运算单元，其输出为 <img src="http://ufldl.stanford.edu/wiki/images/math/8/9/f/89f1f9e549b908834d9fedca36d07bd4.png" alt="\textstyle  h_{W,b}(x) = f(W^Tx) = f(\sum_{i=1}^3 W_{i}x_i +b)"> ，其中函数 <img src="http://ufldl.stanford.edu/wiki/images/math/5/d/f/5df2a707a6b2421afcb345f96051297e.png" alt="\textstyle f : \Re \mapsto \Re"> 被称为“激活函数”。在本教程中，我们选用sigmoid函数作为<strong>激活函数</strong> <img src="http://ufldl.stanford.edu/wiki/images/math/0/3/0/0303dd697c0e1b72185d7939f9870784.png" alt="\textstyle f(\cdot)"></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxeuyk2a5gj304v01agli.jpg" alt=""></p>
<p>可以看出，这个单一“神经元”的输入－输出映射关系其实就是一个逻辑回归（logistic regression）。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxeuzao2hgj30m80gogm8.jpg" alt=""></p>
<h1 id="神经网络模型"><a href="#神经网络模型" class="headerlink" title="神经网络模型"></a>神经网络模型</h1><p>所谓神经网络就是将许多个单一“神经元”联结在一起，这样，一个“神经元”的输出就可以是另一个“神经元”的输入。例如，下图就是一个简单的神经网络：</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxev07o4akj30m80foq4p.jpg" alt=""></p>
<p>我们用 <img src="http://ufldl.stanford.edu/wiki/images/math/5/4/6/546158a6d0082614d47e7f8a63225b0b.png" alt="\textstyle {n}_l"> 来表示网络的层数，本例中 <img src="http://ufldl.stanford.edu/wiki/images/math/3/c/8/3c89b5db1e49221343428af57c90e44a.png" alt="\textstyle n_l=3"> ，我们将第 <img src="http://ufldl.stanford.edu/wiki/images/math/b/a/0/ba0593b3db2fa8535b077516f4b0d70b.png" alt="\textstyle l"> 层记为 <img src="http://ufldl.stanford.edu/wiki/images/math/5/5/e/55ea36127aa64b92b071c269cd1e3990.png" alt="\textstyle L_l"> ，于是 <img src="http://ufldl.stanford.edu/wiki/images/math/1/3/e/13e0887b9e716279d9a7b8bc8e6ad63b.png" alt="\textstyle L_1"> 是输入层，输出层是 <img src="http://ufldl.stanford.edu/wiki/images/math/2/2/1/221a7296664022427d488fdb9b14b19b.png" alt="\textstyle L_{n_l}"> 。本例神经网络有参数 <img src="http://ufldl.stanford.edu/wiki/images/math/a/a/3/aa3d6ed3c577d41a791324008558efbe.png" alt="\textstyle (W,b) = (W^{(1)}, b^{(1)}, W^{(2)}, b^{(2)})"> ，其中 <img src="http://ufldl.stanford.edu/wiki/images/math/d/f/e/dfe43c64e3c42ea4ff1774fc82b87805.png" alt="\textstyle W^{(l)}_{ij}"> （下面的式子中用到）是第 <img src="http://ufldl.stanford.edu/wiki/images/math/b/a/0/ba0593b3db2fa8535b077516f4b0d70b.png" alt="\textstyle l"> 层第 <img src="http://ufldl.stanford.edu/wiki/images/math/2/3/5/235c5146ab110558897640c34dad7d97.png" alt="\textstyle j"> 单元与第 <img src="http://ufldl.stanford.edu/wiki/images/math/9/0/6/9068105ec8ebb97277c937bfa61b606d.png" alt="\textstyle l+1"> 层第 <img src="http://ufldl.stanford.edu/wiki/images/math/0/b/3/0b36ee693126b34b58f77dba7ed23987.png" alt="\textstyle i"> 单元之间的联接参数（其实就是连接线上的权重，注意标号顺序）， <img src="http://ufldl.stanford.edu/wiki/images/math/4/c/7/4c786c16575b63bbb554254725b6b648.png" alt="\textstyle b^{(l)}_i"> 是第 <img src="http://ufldl.stanford.edu/wiki/images/math/9/0/6/9068105ec8ebb97277c937bfa61b606d.png" alt="\textstyle l+1"> 层第 <img src="http://ufldl.stanford.edu/wiki/images/math/0/b/3/0b36ee693126b34b58f77dba7ed23987.png" alt="\textstyle i"> 单元的偏置项。因此在本例中， <img src="http://ufldl.stanford.edu/wiki/images/math/5/c/a/5ca0efbb17e86cb00091f6a528e0ab0e.png" alt="\textstyle W^{(1)} \in \Re^{3\times 3}"> ， <img src="http://ufldl.stanford.edu/wiki/images/math/4/3/1/431cf6f298e4106efb5bff4495aa3c6d.png" alt="\textstyle W^{(2)} \in \Re^{1\times 3}"> 。注意，没有其他单元连向偏置单元(即偏置单元没有输入)，因为它们总是输出 <img src="http://ufldl.stanford.edu/wiki/images/math/d/c/b/dcb8dd3d14a2c0aa9b06ec6ce4ec0d59.png" alt="\textstyle +1">。同时，我们用 <img src="http://ufldl.stanford.edu/wiki/images/math/8/a/f/8afb62ac69ccb2911bb24795ff052a07.png" alt="\textstyle s_l"> 表示第 <img src="http://ufldl.stanford.edu/wiki/images/math/b/a/0/ba0593b3db2fa8535b077516f4b0d70b.png" alt="\textstyle l"> 层的节点数（偏置单元不计在内）。</p>
<h1 id="Keras实战"><a href="#Keras实战" class="headerlink" title="Keras实战"></a>Keras实战</h1><p>使用keras实现如下网络结构, 并训练模型:</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxev23s7swj30d607aq3p.jpg" alt=""></p>
<p>使用场景:</p>
<p>输入值<code>(x1,x2,x3)</code>代表人的身高体重和年龄, 输出值<code>(y1,y2)</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"><span class="comment"># 总人数是1000, 一半是男生</span></div><div class="line">n = <span class="number">1000</span></div><div class="line"><span class="comment"># 所有的身体指标数据都是标准化数据, 平均值0, 标准差1</span></div><div class="line">tizhong = np.random.normal(size = n) </div><div class="line">shengao = np.random.normal(size=n)</div><div class="line">nianling = np.random.normal(size=n)</div><div class="line"><span class="comment"># 性别数据, 前500名学生是男生, 用数字1表示</span></div><div class="line">gender = np.zeros(n)</div><div class="line">gender[:<span class="number">500</span>] = <span class="number">1</span></div><div class="line"><span class="comment"># 男生的体重比较重,所以让男生的体重+1</span></div><div class="line">tizhong[:<span class="number">500</span>] += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># 男生的身高比较高, 所以让男生的升高 + 1</span></div><div class="line">shengao[:<span class="number">500</span>] += <span class="number">1</span></div><div class="line"></div><div class="line"><span class="comment"># 男生的年龄偏小, 所以让男生年龄降低 1</span></div><div class="line">nianling[:<span class="number">500</span>] -= <span class="number">1</span></div></pre></td></tr></table></figure>
<h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> Sequential</div><div class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense, Activation</div><div class="line"></div><div class="line">model = Sequential()</div><div class="line"></div><div class="line"><span class="comment"># 只有一个神经元, 三个输入数值</span></div><div class="line">model.add(Dense(<span class="number">4</span>, input_dim=<span class="number">3</span>, kernel_initializer=<span class="string">'random_normal'</span>, name=<span class="string">"Dense1"</span>))</div><div class="line"></div><div class="line"><span class="comment"># 激活函数使用softmax</span></div><div class="line">model.add(Activation(<span class="string">'relu'</span>, name=<span class="string">"hidden"</span>))</div><div class="line"></div><div class="line"><span class="comment"># 添加输出层</span></div><div class="line">model.add(Dense(<span class="number">2</span>, input_dim=<span class="number">4</span>, kernel_initializer=<span class="string">'random_normal'</span>, name=<span class="string">"Dense2"</span>))</div><div class="line"></div><div class="line"><span class="comment"># 激活函数使用softmax</span></div><div class="line">model.add(Activation(<span class="string">'softmax'</span>, name=<span class="string">"output"</span>))</div></pre></td></tr></table></figure>
<h4 id="编译模型"><a href="#编译模型" class="headerlink" title="编译模型"></a>编译模型</h4><p>需要指定优化器和损失函数:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">model.compile(optimizer=<span class="string">'rmsprop'</span>,</div><div class="line">              loss=<span class="string">'categorical_crossentropy'</span>,</div><div class="line">              metrics=[<span class="string">'accuracy'</span>])</div></pre></td></tr></table></figure>
<h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 转换成one-hot格式</span></div><div class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> utils</div><div class="line">gender_one_hot = utils.to_categorical(gender, num_classes=<span class="number">2</span>)</div><div class="line"><span class="comment"># 身体指标都放入一个矩阵data </span></div><div class="line">data = np.array([tizhong, shengao, nianling]).T</div><div class="line"><span class="comment"># 训练模型</span></div><div class="line">model.fit(data, gender_one_hot, epochs=<span class="number">10</span>, batch_size=<span class="number">8</span>)</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">输出(stream):</div><div class="line">Epoch 1/10</div><div class="line">1000/1000 [==============================] - 0s 235us/step - loss: 0.6743 - acc: 0.7180</div><div class="line">Epoch 2/10</div><div class="line">1000/1000 [==============================] - 0s 86us/step - loss: 0.6162 - acc: 0.7310</div><div class="line">Epoch 3/10</div><div class="line">1000/1000 [==============================] - 0s 88us/step - loss: 0.5592 - acc: 0.7570</div><div class="line">Epoch 4/10</div><div class="line">1000/1000 [==============================] - 0s 87us/step - loss: 0.5162 - acc: 0.7680</div><div class="line">Epoch 5/10</div><div class="line">1000/1000 [==============================] - 0s 89us/step - loss: 0.4867 - acc: 0.7770</div><div class="line">Epoch 6/10</div><div class="line">1000/1000 [==============================] - 0s 88us/step - loss: 0.4663 - acc: 0.7830</div><div class="line">Epoch 7/10</div><div class="line">1000/1000 [==============================] - 0s 87us/step - loss: 0.4539 - acc: 0.7890</div><div class="line">Epoch 8/10</div><div class="line">1000/1000 [==============================] - 0s 86us/step - loss: 0.4469 - acc: 0.7920</div><div class="line">Epoch 9/10</div><div class="line">1000/1000 [==============================] - 0s 88us/step - loss: 0.4431 - acc: 0.7940</div><div class="line">Epoch 10/10</div><div class="line">1000/1000 [==============================] - 0s 88us/step - loss: 0.4407 - acc: 0.7900</div><div class="line">输出(plain):</div></pre></td></tr></table></figure>
<h4 id="进行预测"><a href="#进行预测" class="headerlink" title="进行预测"></a>进行预测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">test_data = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]])</div><div class="line">probability = model.predict(test_data)</div><div class="line"><span class="keyword">if</span> probability[<span class="number">0</span>, <span class="number">0</span>]&gt;<span class="number">0.5</span>:</div><div class="line">    print(<span class="string">'女生'</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    print(<span class="string">'男生'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">输出(stream):</div><div class="line">女生</div></pre></td></tr></table></figure>
<h4 id="关键词解释"><a href="#关键词解释" class="headerlink" title="关键词解释"></a>关键词解释</h4><ul>
<li>input_dim: 输入的维度数</li>
<li>kernel_initializer: 数值初始化方法, 通常是正太分布</li>
<li>batch_size: 一次训练中, 样本数据被分割成多个小份, 每一小份包含的样本数叫做batch_size</li>
<li>epochs: 如果说将所有数据训练一次叫做一轮的话。epochs决定了总共进行几轮训练。</li>
<li>optimizer: 优化器, 可以理解为求梯度的方法</li>
<li>loss: 损失函数, 可以理解为用于衡量估计值和观察值之间的差距, 差距越小, loss越小</li>
<li>metrics: 类似loss, 只是metrics不参与梯度计算, 只是一个衡量算法准确性的指标, 分类模型就用accuracy</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fxeukkzw5cj30d607aq3p.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十三篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;深度学习  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="https://zhangslob.github.io/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
  </entry>
  
  <entry>
    <title>WebSocket爬虫之爬取龙珠弹幕</title>
    <link href="https://zhangslob.github.io/2018/11/17/WebSocket%E7%88%AC%E8%99%AB%E4%B9%8B%E7%88%AC%E5%8F%96%E9%BE%99%E7%8F%A0%E5%BC%B9%E5%B9%95/"/>
    <id>https://zhangslob.github.io/2018/11/17/WebSocket爬虫之爬取龙珠弹幕/</id>
    <published>2018-11-17T05:55:12.214Z</published>
    <updated>2018-11-17T07:04:54.320Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxb0rz5119j30e80e80t6.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十二篇原创文章</div></pre></td></tr></table></figure>
<p>弹幕爬虫  (๑• . •๑)</p>
<a id="more"></a>
<p>我是一个直播爱好者，喜欢看很多人直播，以前可以看一天直播不出门。现在主要看这么些主播，虎牙的韦神、Dopa，斗鱼的狗贼嘘嘘。</p>
<p>对于其中的弹幕文化，非常感兴趣，就研究下，发现弹幕是用WebSocket实现的，那首先来说说什么是WebSocket。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxb2f4o6f7j30hz0b840d.jpg" alt=""></p>
<h1 id="WebSocket是什么"><a href="#WebSocket是什么" class="headerlink" title="WebSocket是什么"></a>WebSocket是什么</h1><p>详细内容可以看看这个问题<a href="https://www.zhihu.com/question/20215561" target="_blank" rel="external">WebSocket 是什么原理？为什么可以实现持久连接？</a></p>
<p>简单解释下：</p>
<p>HTTP 协议是一种无状态的、无连接的、单向的应用层协议。它采用了请求/响应模型。通信请求只能由客户端发起，服务端对请求做出应答处理。</p>
<p>这种通信模型有一个弊端：HTTP 协议无法实现服务器主动向客户端发起消息。大多数 Web 应用程序将通过频繁的异步JavaScript和XML（AJAX）请求实现长轮询。轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）。</p>
<p>WebSocket的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息。</p>
<h1 id="WebSocket-如何工作"><a href="#WebSocket-如何工作" class="headerlink" title="WebSocket 如何工作"></a>WebSocket 如何工作</h1><table>
<thead>
<tr>
<th>事件</th>
<th>事件处理程序</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>open</td>
<td>WebSocket.onopen</td>
<td>连接建立时触发</td>
</tr>
<tr>
<td>message</td>
<td>WebSocket.onmessage</td>
<td>客户端接收服务端数据时触发</td>
</tr>
<tr>
<td>error</td>
<td>WebSocket.onerror</td>
<td>通信发生错误时触发</td>
</tr>
<tr>
<td>close</td>
<td>WebSocket.onclose</td>
<td>连接关闭时触发</td>
</tr>
</tbody>
</table>
<p>一个非常典型的WebSocket创建方式如下（来自某巨头）：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!d) &#123;</div><div class="line">        <span class="keyword">var</span> t = i();</div><div class="line">        I.info(<span class="string">"%cconnecting "</span> + t, p(<span class="string">"#0000E3"</span>)),</div><div class="line">            u = <span class="keyword">new</span> WebSocket(t),</div><div class="line">            u.onopen = n,</div><div class="line">            u.onclose = o,</div><div class="line">            u.onerror = a,</div><div class="line">            u.onmessage = h</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="WebSocket获取龙珠直播弹幕"><a href="#WebSocket获取龙珠直播弹幕" class="headerlink" title="WebSocket获取龙珠直播弹幕"></a>WebSocket获取龙珠直播弹幕</h1><p>本次使用的Python第三方库是 <a href="https://github.com/websocket-client/websocket-client" target="_blank" rel="external">websocket-client</a></p>
<p>看看官方例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> websocket</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> thread</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">import</span> _thread <span class="keyword">as</span> thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, message)</span>:</span></div><div class="line">    print(message)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_error</span><span class="params">(ws, error)</span>:</span></div><div class="line">    print(error)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></div><div class="line">    print(<span class="string">"### closed ###"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(*args)</span>:</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">            time.sleep(<span class="number">1</span>)</div><div class="line">            ws.send(<span class="string">"Hello %d"</span> % i)</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        ws.close()</div><div class="line">        print(<span class="string">"thread terminating..."</span>)</div><div class="line">    thread.start_new_thread(run, ())</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    websocket.enableTrace(<span class="keyword">True</span>)</div><div class="line">    ws = websocket.WebSocketApp(<span class="string">"ws://echo.websocket.org/"</span>,</div><div class="line">                              on_message = on_message,</div><div class="line">                              on_error = on_error,</div><div class="line">                              on_close = on_close)</div><div class="line">    ws.on_open = on_open</div><div class="line">    ws.run_forever()</div></pre></td></tr></table></figure>
<p>是不是非常熟悉，和上面讲到的一模一样，4种主要思想方法都是一致的，可以直接调用。</p>
<p>那么到了实践环节，本次选取的是龙珠直播，为啥不是虎牙、斗鱼呢？这个待会再说，我们打开龙珠某个直播间</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxb1g9ax9mj31c00u0qgn.jpg" alt=""></p>
<p>在网络里面选择ws这一项，即可看到相关连接，而且这些消息是加密过的，别急，我们打开m站试试</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxb1ip00faj31c00u0k74.jpg" alt=""></p>
<p>这个时候传输的弹幕消息已经没有加密过，直接对比，看到了一条“哈哈哈”的消息，所以我们现在可以确定就是这个websocket连接在传输相关消息。</p>
<p>依葫芦画瓢，我们尝试用Python来连接</p>
<p>Curl:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl <span class="string">'wss://mbgows.plu.cn:8806/?room_id=2185&amp;group=0'</span> -H <span class="string">'Pragma: no-cache'</span> -H <span class="string">'Origin: http://m.longzhu.com'</span> -H <span class="string">'Accept-Encoding: gzip, deflate, br'</span> -H <span class="string">'Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7'</span> -H <span class="string">'Sec-WebSocket-Key: n72+EfLt2iSrQ0EswTZ+2A=='</span> -H <span class="string">'User-Agent: Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Mobile Safari/537.36'</span> -H <span class="string">'Upgrade: websocket'</span> -H <span class="string">'Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits'</span> -H <span class="string">'Cache-Control: no-cache'</span> -H <span class="string">'Cookie: pluguest=81D781D68480BE065D952CA699B38E6627B61756AEF57338B39053154850A9502BC7FD850F86922BDF3DBD7F774BFDE5CBC80838A34B8F26'</span> -H <span class="string">'Connection: Upgrade'</span> -H <span class="string">'Sec-WebSocket-Version: 13'</span> --compressed</div></pre></td></tr></table></figure>
<p>Python代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python  </span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="string">"""</span></div><div class="line">@author: zhangslob</div><div class="line">@file: longzhu_websocket.py </div><div class="line">@time: 2018/11/17</div><div class="line">@desc: simple websocket client to connect longzhu</div><div class="line">"""</div><div class="line"></div><div class="line"><span class="keyword">import</span> websocket</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">import</span> thread</div><div class="line"><span class="keyword">except</span> ImportError:</div><div class="line">    <span class="keyword">import</span> _thread <span class="keyword">as</span> thread</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_message</span><span class="params">(ws, message)</span>:</span></div><div class="line">    <span class="keyword">import</span> json</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        print(json.loads(message))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(message)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_error</span><span class="params">(ws, error)</span>:</span></div><div class="line">    print(error)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(ws)</span>:</span></div><div class="line">    print(<span class="string">"### closed ###"</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_open</span><span class="params">(ws)</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line">    <span class="comment"># def run(*args):</span></div><div class="line">    <span class="comment">#     for i in range(3):</span></div><div class="line">    <span class="comment">#         time.sleep(1)</span></div><div class="line">    <span class="comment">#         ws.send("Hello %d" % i)</span></div><div class="line">    <span class="comment">#     time.sleep(1)</span></div><div class="line">    <span class="comment">#     ws.close()</span></div><div class="line">    <span class="comment">#     print("thread terminating...")</span></div><div class="line">    <span class="comment"># thread.start_new_thread(run, ())</span></div><div class="line"></div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'Pragma'</span>: <span class="string">'no-cache'</span>,</div><div class="line">    <span class="string">'Origin'</span>: <span class="string">'http://m.longzhu.com'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7'</span>,</div><div class="line">    <span class="comment"># 'Sec-WebSocket-Key': 'n72+EfLt2iSrQ0EswTZ+2A==',</span></div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Mobile Safari/537.36'</span>,</div><div class="line">    <span class="string">'Upgrade'</span>: <span class="string">'websocket'</span>,</div><div class="line">    <span class="string">'Sec-WebSocket-Extensions'</span>: <span class="string">'permessage-deflate; client_max_window_bits'</span>,</div><div class="line">    <span class="string">'Cache-Control'</span>: <span class="string">'no-cache'</span>,</div><div class="line">    <span class="string">'Connection'</span>: <span class="string">'Upgrade'</span>,</div><div class="line">    <span class="string">'Sec-WebSocket-Version'</span>: <span class="string">'13'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    websocket.enableTrace(<span class="keyword">True</span>)</div><div class="line">    ws = websocket.WebSocketApp(<span class="string">"wss://mbgows.plu.cn:8806/?room_id=2185&amp;group=0"</span>,</div><div class="line">                                on_message=on_message,</div><div class="line">                                on_error=on_error,</div><div class="line">                                on_close=on_close,</div><div class="line">                                header=headers)</div><div class="line">    ws.on_open = on_open</div><div class="line">    ws.run_forever()</div></pre></td></tr></table></figure>
<p>你可以直接运行上面的代码，看看会有什么结果</p>
<p>龙珠直播这个有点奇怪，你根本不用去向服务器发送什么消息，服务器无脑给你推送弹幕，常见的是客户端需要先告诉服务器“我是谁”，然后服务器再推送消息给你，并且还有有心跳检测，“我”告诉服务器我还在看呢，你继续给我弹幕，看看虎牙和斗鱼。</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fxb26wyj8jj31c00u0du0.jpg" alt=""></p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxb28n41omj31c00u07hd.jpg" alt=""></p>
<p>图中绿色的是发送的消息，红色是接受的消息。像这种情况就需要自己去看js代码是如何处理消息的。斗鱼的话有公开自己的弹幕服务器第三方接入协议。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fxb0rz5119j30e80e80t6.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十二篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;弹幕爬虫  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
  </entry>
  
  <entry>
    <title>Pycharm插件推荐：Docker integration</title>
    <link href="https://zhangslob.github.io/2018/11/15/Pycharm%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90%EF%BC%9ADocker-integration/"/>
    <id>https://zhangslob.github.io/2018/11/15/Pycharm插件推荐：Docker-integration/</id>
    <published>2018-11-15T10:58:11.000Z</published>
    <updated>2018-11-15T16:02:37.451Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx8y8y3sofj30xc0m8t95.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十一篇原创文章</div></pre></td></tr></table></figure>
<p>简易Docker操作  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="插件Docker"><a href="#插件Docker" class="headerlink" title="插件Docker"></a>插件Docker</h1><p>在设置-Plugins-BROWSE REPOSITORIES…    中搜索“Docker”</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx8yiima0hj30mw0isacz.jpg" alt=""></p>
<p>安装即可，重启使用</p>
<p>当然本地必须先安装Docker，并且打开Docker，而且需要加入用户组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo groupadd docker &amp;&amp; sudo usermod <span class="_">-a</span>G docker <span class="variable">$USER</span></div></pre></td></tr></table></figure>
<p>之后就可以不加<code>sudo</code>运行Docker命令了</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run hello-world</div></pre></td></tr></table></figure>
<p>打开之后就是这样的</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx8yqmlfjvj30m80er3yw.jpg" alt=""></p>
<p>分别就是容器和镜像，下面举一个简单的栗子，先去拉python的镜像，然后运行<code>helloworld.py</code>文件</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">FROM</span> python</div><div class="line"></div><div class="line"><span class="keyword">COPY</span><span class="bash"> helloworld.py /app/helloworld.py</span></div><div class="line"></div><div class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></div></pre></td></tr></table></figure>
<p>在Dockerfile左边有一个绿色按钮，Run Dockerfile</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fx968pvek8j31c00u010k.jpg" alt=""></p>
<p><code>helloworld.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>
<p>这里会直接报错，因为python3嘛，然后我们现在需要修复，可以先修改python文件，再重新build，这里介绍一种更简单的方法。</p>
<p>右键点击构建好的容器，点击“Exec”，输入<code>/bin/bash</code>进入shell</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx969iv7kkj30s00l8jus.jpg" alt=""></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">root@a8b31f52a720:/app<span class="comment"># ls</span></div><div class="line">helloworld.py</div><div class="line">root@a8b31f52a720:/app<span class="comment"># python helloworld.py </span></div><div class="line">  File <span class="string">"helloworld.py"</span>, line 1</div><div class="line">    <span class="built_in">print</span> <span class="string">'hello world'</span></div><div class="line">                      ^</div><div class="line">SyntaxError: Missing parentheses <span class="keyword">in</span> call to <span class="string">'print'</span>. Did you mean <span class="built_in">print</span>(<span class="string">'hello world'</span>)?</div><div class="line">root@a8b31f52a720:/app<span class="comment"># python --version</span></div><div class="line">Python 3.7.1</div><div class="line">root@a8b31f52a720:/app<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>我们拉取的镜像是Python3.7版本的，我想要直接在Pycharm中编辑PY文件，并让Docker直接同步文件变化，可以使用下面这个功能：Volume Bindings</p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fx96ybv0vnj31b40p4q5x.jpg" alt=" "></p>
<p>分别填上Docker中的目录与本地所在目录，一定要点击右下角的SAVE，稍等片刻，点击Volume Bindings 就可以看到关联了。</p>
<p>其实这个功能就是Docker中的Volume，Docker 中可以通过 Volume 实现持久化存储和数据共享。只不过这里通过可视化非常方便调试。</p>
<p>还有其他功能，像设置环境变量、端口暴露等等，使用这个插件就会比较容易处理。</p>
<p>其实我用的比较多的情况是爬虫本地和线上有差距时就会来测试，有时候是发现某个依赖没有装，有时候则是网络问题。</p>
<p>Docker测试可以保证的一点是环境完全一致。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNbRwly1fx8y8y3sofj30xc0m8t95.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十一篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简易Docker操作  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="Pycharm" scheme="https://zhangslob.github.io/categories/Pycharm/"/>
    
    
      <category term="Pycharm" scheme="https://zhangslob.github.io/tags/Pycharm/"/>
    
      <category term="Docker" scheme="https://zhangslob.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Python实现常见的回文字符串算法</title>
    <link href="https://zhangslob.github.io/2018/11/13/Python%E5%AE%9E%E7%8E%B0%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
    <id>https://zhangslob.github.io/2018/11/13/Python实现常见的回文字符串算法/</id>
    <published>2018-11-13T14:09:41.000Z</published>
    <updated>2018-11-13T14:28:57.507Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx6sk819rfj31as0sakjl.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第七十篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h1 id="回文"><a href="#回文" class="headerlink" title="回文"></a>回文</h1><p>利用python 自带的翻转 函数<code>reversed()</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_plalindrome</span><span class="params">(string)</span>:</span>    </div><div class="line">    <span class="keyword">return</span> string == <span class="string">''</span>.join(list(reversed(string)))</div></pre></td></tr></table></figure>
<p>自己实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_plalindrome</span><span class="params">(string)</span>:</span></div><div class="line">    string = list(string)</div><div class="line">    length = len(string)</div><div class="line">    left = <span class="number">0</span></div><div class="line">    right = length - <span class="number">1</span></div><div class="line">    <span class="keyword">while</span> left &lt; right:</div><div class="line">        <span class="keyword">if</span> string[left] != string[right]:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        left += <span class="number">1</span></div><div class="line">        right -= <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h1 id="最长的回文子串"><a href="#最长的回文子串" class="headerlink" title="最长的回文子串"></a>最长的回文子串</h1><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>暴力破解，枚举所有的子串，对每个子串判断是否为回文， 时间复杂度为 O(n^3)</p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(s)</span>:</span></div><div class="line">    s = list(s)</div><div class="line">    l = len(s)</div><div class="line">    dp = [[<span class="number">0</span>] * l <span class="keyword">for</span> i <span class="keyword">in</span> range(l)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</div><div class="line">        dp[i][i] = <span class="keyword">True</span></div><div class="line">        <span class="comment"># 当 k = 2时要用到</span></div><div class="line">        dp[i][i - <span class="number">1</span>] = <span class="keyword">True</span></div><div class="line">    resLeft = <span class="number">0</span></div><div class="line">    resRight = <span class="number">0</span></div><div class="line">    <span class="comment"># 枚举子串的长度</span></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">2</span>, l+<span class="number">1</span>):</div><div class="line">        <span class="comment"># 子串的起始位置</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, l-k+<span class="number">1</span>):</div><div class="line">            j = i + k - <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> s[i] == s[j] <span class="keyword">and</span> dp[i + <span class="number">1</span>][j - <span class="number">1</span>]:</div><div class="line">                dp[i][j] = <span class="keyword">True</span></div><div class="line">                <span class="comment"># 保存最长的回文起点和终点</span></div><div class="line">                <span class="keyword">if</span> resRight - resLeft + <span class="number">1</span> &lt; k:</div><div class="line">                    resLeft = i</div><div class="line">                    resRight = j</div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(s[resLeft:resRight+<span class="number">1</span>])</div></pre></td></tr></table></figure>
<p>时间复杂度为 O(n^2), 空间复杂度为 O(n^2)</p>
<h3 id="Manacher-算法"><a href="#Manacher-算法" class="headerlink" title="Manacher 算法"></a>Manacher 算法</h3><p>Manacher 算法首先对字符串做一个预处理,使得所有的串都是奇数长度, 插入的是同样的符号且符号不存在与原串中，串的回文性不受影响</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aba =&gt; <span class="comment">#a#b#a#</span></div><div class="line">abab =&gt; <span class="comment">#a#b#a#b#</span></div></pre></td></tr></table></figure>
<p>我们把回文串中最右位置与其对称轴的距离称为回文半径，Manacher 算法定义了一个回文半径数组 RL，RL[i]表示以第 i 个字符为对称轴的回文半径，对于上面得到的插入分隔符的串来说，我们可以得到 RL数组</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">char:  <span class="comment"># a # b # a #</span></div><div class="line">RL:    1 2 1 4 1 2 1</div><div class="line">RL-1:  0 1 0 3 0 1 0</div><div class="line">i:     0 1 2 3 4 5 6</div><div class="line">char: <span class="comment"># a # b # a # b #</span></div><div class="line">RL:   1 2 1 4 1 4 1 2 1</div><div class="line">RL-1: 0 1 0 3 0 3 0 1 0</div><div class="line">i:    0 1 2 3 4 5 6 7 8</div></pre></td></tr></table></figure>
<p>我们还求了 RL[i] - 1: 我们发现<strong>RL[i] -1 正好是初始字符串中以位置i 为对称轴的最长回文长度</strong></p>
<p>所以下面就是重点如何求得 RL 数组了， 可以参考这篇<a href="https://segmentfault.com/a/1190000003914228#articleHeader5" target="_blank" rel="external">文章</a> (讲得比较清晰)</p>
<p>下面是算法实现</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">manacher</span><span class="params">(preS)</span>:</span></div><div class="line">    s = <span class="string">'#'</span> + <span class="string">'#'</span>.join(preS) + <span class="string">'#'</span></div><div class="line">    l = len(s)</div><div class="line">    RL = [<span class="number">0</span>] * l</div><div class="line">    maxRight = pos = maxLen = <span class="number">0</span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</div><div class="line">        <span class="keyword">if</span> i &lt; maxRight:</div><div class="line">            RL[i] = min(RL[<span class="number">2</span>*pos - i], maxRight-i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            RL[i] = <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> i - RL[i] &gt;= <span class="number">0</span> <span class="keyword">and</span> i + RL[i] &lt; l <span class="keyword">and</span> s[i - RL[i]] == s[i + RL[i]]:</div><div class="line">            RL[i] += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> i + RL[i] - <span class="number">1</span> &gt; maxRight:</div><div class="line">            maxRight = i + RL[i] - <span class="number">1</span></div><div class="line">            pos = i</div><div class="line">    maxLen = max(RL)</div><div class="line">    idx = RL.index(maxLen)</div><div class="line">    sub = s[idx - maxLen + <span class="number">1</span>: idx + maxLen]</div><div class="line">    <span class="keyword">return</span> sub.replace(<span class="string">'#'</span>, <span class="string">''</span>)</div></pre></td></tr></table></figure>
<p>空间复杂度：借助了一个辅助数组，空间复杂度为 O(n)<br>时间复杂度：尽管内层存在循环，但是内层循环只对尚未匹配的部分进行，对于每一个字符来说，只会进行一次，所以时间复杂度是 O(n)</p>
<h1 id="最长回文前缀"><a href="#最长回文前缀" class="headerlink" title="最长回文前缀"></a>最长回文前缀</h1><p>所谓前缀，就是以第一个字符开始</p>
<p>下面的最长回文前缀</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">abbabbc =&gt; abbc</div><div class="line">abababb =&gt; ababa</div><div class="line">sogou =&gt; s</div></pre></td></tr></table></figure>
<p>将原串逆转，那么问题就转变为求原串的前缀和逆串后缀<strong>相等且长度最大的值</strong>, 这个问题其实就是 <a href="http://youbookee.com/2016/09/18/kmp-python/" target="_blank" rel="external">KMP 算法</a>中的 next 数组的求解了</p>
<p>具体求解： 将原串逆转并拼接到原串中， 以’#’ 分隔原串和逆转避免内部字符串干扰。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">longest_palindrome_prefix</span><span class="params">(s)</span>:</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> s:</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    s = s + <span class="string">'#'</span> + s[::<span class="number">-1</span>] + <span class="string">'$'</span></div><div class="line">    i = <span class="number">0</span></div><div class="line">    j = <span class="number">-1</span></div><div class="line">    nt = [<span class="number">0</span>] * len(s)</div><div class="line">    nt[<span class="number">0</span>] = <span class="number">-1</span></div><div class="line">    <span class="keyword">while</span> i &lt; len(s) - <span class="number">1</span>:</div><div class="line">        <span class="keyword">if</span> j == <span class="number">-1</span> <span class="keyword">or</span> s[i] == s[j]:</div><div class="line">            i += <span class="number">1</span></div><div class="line">            j += <span class="number">1</span></div><div class="line">            nt[i] = j</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            j = nt[j]</div><div class="line">    <span class="keyword">return</span> nt[len(s) - <span class="number">1</span>]</div></pre></td></tr></table></figure>
<h1 id="添加字符生成最短回文字符串"><a href="#添加字符生成最短回文字符串" class="headerlink" title="添加字符生成最短回文字符串"></a>添加字符生成最短回文字符串</h1><p>这道题其实跟上面基本是一样的，<br>实例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">aacecaaa -&gt; aaacecaaa <span class="comment"># 添加 a</span></div><div class="line">abcd -&gt; dcbabcd <span class="comment"># 添加 dcb</span></div></pre></td></tr></table></figure>
<p>我们先求字符串的最长回文前缀, 然后剩余的字符串逆转并拼接到字符串的头部即是问题所求</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(s)</span>:</span></div><div class="line">    length = longest_palindrome_prefix(s)</div><div class="line">    <span class="keyword">return</span> s[length:][::<span class="number">-1</span>] + s</div></pre></td></tr></table></figure>
<h1 id="最长回文子序列"><a href="#最长回文子序列" class="headerlink" title="最长回文子序列"></a>最长回文子序列</h1><h4 id="动态规划法"><a href="#动态规划法" class="headerlink" title="动态规划法"></a>动态规划法</h4><ul>
<li>dp[i][j] 表示子序列 s[i..j] 中存在的最长回文子序列长度</li>
<li>初始化dp[i][i] = 1</li>
<li>当 s[i] == s[j] 为 true 时，dp[i][j] = dp[i+1][j - 1] + 2</li>
<li>当 s[i] == s[j] 为 false 时，dp[i][j] = max(dp[i+1][j], dp[i][j - 1])</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 求得最长回文子序列的长度</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span><span class="params">(s)</span>:</span></div><div class="line">    l = len(s)</div><div class="line">    dp = [[<span class="number">0</span>] * l <span class="keyword">for</span> i <span class="keyword">in</span> range(l)]</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l):</div><div class="line">        dp[i][i] = <span class="number">1</span></div><div class="line">    <span class="comment"># 枚举子串的长度</span></div><div class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">2</span>, l+<span class="number">1</span>):</div><div class="line">        <span class="comment"># 枚举子串的起始位置</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, l-k+<span class="number">1</span>):</div><div class="line">            j = i + k - <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> s[i] == s[j]:</div><div class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                dp[i][j] = max(dp[i][j - <span class="number">1</span>], dp[i + <span class="number">1</span>][j])</div><div class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][l<span class="number">-1</span>]</div></pre></td></tr></table></figure>
<p>时间复杂度为 O(n^2), 空间复杂度为 O(n^2)</p>
<p>转自：<a href="http://youbookee.com/2016/09/06/plalindrome-substring/" target="_blank" rel="external">http://youbookee.com/2016/09/06/plalindrome-substring/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fx6sk819rfj31as0sakjl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第七十篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="算法" scheme="https://zhangslob.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://zhangslob.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>爬虫之全站爬取方法</title>
    <link href="https://zhangslob.github.io/2018/11/07/%E7%88%AC%E8%99%AB%E4%B9%8B%E5%85%A8%E7%AB%99%E7%88%AC%E5%8F%96%E6%96%B9%E6%B3%95/"/>
    <id>https://zhangslob.github.io/2018/11/07/爬虫之全站爬取方法/</id>
    <published>2018-11-07T11:23:43.000Z</published>
    <updated>2018-11-08T07:39:05.445Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx0nl2hsyjj30sb0ihjtw.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十九篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>做过好几个关于网站全站的项目，这里总结一下。</p>
<p>先把上面那张图写下来，全站爬取的两种方法：</p>
<ol>
<li>关系网络：<ol>
<li>优点：简单；可以抓取“热门”数据</li>
<li>缺点：无法抓取全量数据；速度慢；需要解决去重问题</li>
<li>可行性：比较高</li>
</ol>
</li>
<li>遍历ID<ol>
<li>优点：可以抓取所有数据；不用数据去重</li>
<li>缺点：资源消耗大；速度慢；可能被发现</li>
<li>可行性：仅可用于ID自增</li>
</ol>
</li>
</ol>
<h1 id="关于关系网络"><a href="#关于关系网络" class="headerlink" title="关于关系网络"></a>关于关系网络</h1><p>其实这个很好理解。比如说知乎，一个大V有100W粉丝，从这个大V出发，抓取粉丝的粉丝，一直循环下去。（可能是个死循环）</p>
<p>这个方法就比较简单，<code>Scrapy</code>中就是继承<code>CrawlSpider</code>，再编写匹配规则就好。</p>
<p>Example</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> scrapy</div><div class="line"><span class="keyword">from</span> scrapy.spiders <span class="keyword">import</span> CrawlSpider, Rule</div><div class="line"><span class="keyword">from</span> scrapy.linkextractors <span class="keyword">import</span> LinkExtractor</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySpider</span><span class="params">(CrawlSpider)</span>:</span></div><div class="line">    name = <span class="string">'example.com'</span></div><div class="line">    allowed_domains = [<span class="string">'example.com'</span>]</div><div class="line">    start_urls = [<span class="string">'http://www.example.com'</span>]</div><div class="line"></div><div class="line">    rules = (</div><div class="line">        <span class="comment"># Extract links matching 'category.php' (but not matching 'subsection.php')</span></div><div class="line">        <span class="comment"># and follow links from them (since no callback means follow=True by default).</span></div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'category\.php'</span>, ), deny=(<span class="string">'subsection\.php'</span>, ))),</div><div class="line"></div><div class="line">        <span class="comment"># Extract links matching 'item.php' and parse them with the spider's method parse_item</span></div><div class="line">        Rule(LinkExtractor(allow=(<span class="string">'item\.php'</span>, )), callback=<span class="string">'parse_item'</span>),</div><div class="line">    )</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_item</span><span class="params">(self, response)</span>:</span></div><div class="line">        self.logger.info(<span class="string">'Hi, this is an item page! %s'</span>, response.url)</div><div class="line">        item = scrapy.Item()</div><div class="line">        item[<span class="string">'id'</span>] = response.xpath(<span class="string">'//td[@id="item_id"]/text()'</span>).re(<span class="string">r'ID: (\d+)'</span>)</div><div class="line">        item[<span class="string">'name'</span>] = response.xpath(<span class="string">'//td[@id="item_name"]/text()'</span>).extract()</div><div class="line">        item[<span class="string">'description'</span>] = response.xpath(<span class="string">'//td[@id="item_description"]/text()'</span>).extract()</div><div class="line">        <span class="keyword">return</span> item</div></pre></td></tr></table></figure>
<p>这种方法一般是搜索引擎会做的。而且抓取的内容基本是最多人看到的，所以月排在前面，和SEO有关。</p>
<p>但是这种方法的缺点也是很明显的，最明显的就是没法抓全数据，像那种冷门的数据就没法抓取到，速度也是比较慢的，必须保存去重队列，以防止重复抓取页面。（了解下<a href="https://github.com/kongtianyi/BloomFilterRedis" target="_blank" rel="external">布隆过滤器</a>）</p>
<p>如果对数据完整性要求没那么高可以考虑这种方法。</p>
<h1 id="遍历ID"><a href="#遍历ID" class="headerlink" title="遍历ID"></a>遍历ID</h1><p>找各种方法就比较无脑了，啥也不用想，从0开始遍历跑吧。</p>
<p>毫无疑问，这种方法可以抓取网站所有的数据，因为在开始抓取前就已经完成的去重，所以这方面就不用管了。</p>
<p>但是缺点也很明显，因为是遍历ID，所以需要很多服务器资源和代理资源，有可能某个ID已经下架或失效。所以整个工程请求量会非常大。而且可能被别人发现，一般人都去看那些热门帖子，结果你把那么重来没人看的翻了一遍，别人也会发现数据异常的（也会存在假数据的情况😭）。</p>
<p>而且这种方法之适用于ID自增的，大多数是数字ID递增，比如说天眼查的：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https://www.tianyancha.com/company/24762997</div><div class="line">https://www.tianyancha.com/company/150041670</div><div class="line">https://www.tianyancha.com/company/1073358312</div></pre></td></tr></table></figure>
<p>知乎也是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">https://zhuanlan.zhihu.com/p/47969297</div><div class="line">https://zhuanlan.zhihu.com/p/48652497</div><div class="line">https://zhuanlan.zhihu.com/p/47805332</div></pre></td></tr></table></figure>
<p>应该是和数字有关系，可以先采样进行抓取，研究数据分布情况。</p>
<p>当提供不正确ID时，也会返回数据不存在的情况</p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx0oscxi0cj30z90kfgqa.jpg" alt=""></p>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fx0ovjg53wj30pn0fkwf3.jpg" alt=""></p>
<p>在这里提供一个生成ID的方法</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">gen_uid</span><span class="params">(num)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    使用生成器生成ID</div><div class="line">    :param num: 起始ID</div><div class="line">    :return: 生成器</div><div class="line">    """</div><div class="line">    js = <span class="number">0</span></div><div class="line">    result = list()</div><div class="line">    <span class="keyword">while</span> js &lt; <span class="number">20000</span>:</div><div class="line">        num += <span class="number">1</span></div><div class="line">        js += <span class="number">1</span></div><div class="line">        result.append(num)</div><div class="line"></div><div class="line">    <span class="keyword">yield</span> result</div></pre></td></tr></table></figure>
<p>最后再看看这张图。两种方法都有优缺点，根据实际需求选取，如果你还知道别的抓取方法，欢迎指出。</p>
<p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fx0nl2hsyjj30sb0ihjtw.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNbRwly1fx0nl2hsyjj30sb0ihjtw.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十九篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="爬虫" scheme="https://zhangslob.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Scala学习之相同的函数名</title>
    <link href="https://zhangslob.github.io/2018/11/05/Scala%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%9B%B8%E5%90%8C%E7%9A%84%E5%87%BD%E6%95%B0%E5%90%8D/"/>
    <id>https://zhangslob.github.io/2018/11/05/Scala学习之相同的函数名/</id>
    <published>2018-11-05T14:29:02.000Z</published>
    <updated>2018-11-05T15:00:16.661Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwxk5mgus2j30kk064t9d.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十八篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<p>最近在慢慢的开始用Scala写Spark，刚开始也是在菜鸟教程上简单过了一遍Scala，现在还记得一些基本语法，还有各种奇怪的语法糖。想要更快的学习这门语言，还是需要自己多谢谢。</p>
<p>今天在看别人代码时，发现他在类中定义了两个名字一模一样的函数，但是我还以为他写错了。当我以Python的思维去看待这们语言时，当然是在作死的边缘了。</p>
<p>举一个简单的栗子，从MongoDB读取数据时使用的配置所定义的两个函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readConfig</span></span>(context: <span class="type">SparkContext</span>, database: <span class="type">String</span>, collection: <span class="type">String</span>): <span class="type">ReadConfig</span> = &#123;</div><div class="line">  <span class="type">ReadConfig</span>(<span class="type">Map</span>(<span class="string">"database"</span> -&gt; database, <span class="string">"collection"</span> -&gt; collection),</div><div class="line">    <span class="type">Some</span>(<span class="type">ReadConfig</span>(context)))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">readConfig</span></span>(session: <span class="type">SparkSession</span>, database: <span class="type">String</span>, collection: <span class="type">String</span>): <span class="type">ReadConfig</span> = &#123;</div><div class="line">  <span class="type">ReadConfig</span>(<span class="type">Map</span>(<span class="string">"database"</span> -&gt; database, <span class="string">"collection"</span> -&gt; collection),</div><div class="line">    <span class="type">Some</span>(<span class="type">ReadConfig</span>(session)))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到两个函数名一样的，刚开始我也很懵逼，但是仔细一看，他的参数是不一样的，一个是<code>context: SparkContext</code>，一个是<code>session: SparkSession</code>。这两个函数的功能一样，但是接受的参数不一样，所以这才需要去定义两个函数。（试想一下，在Python中如何去实现）</p>
<p>可能你不懂Scala，让我简单跟你讲一下。首先我们使用<code>def</code>关键字定义了一个名为<code>readConfig</code>的函数，和Python一模一样；然后就是函数接受的参数了，可以看到在每个参数后面有冒号，这个冒号就表示前面的数据类型，比如定义一个相加函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">add</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">def</span> <span class="title">addInt</span></span>(a:<span class="type">Int</span>, b:<span class="type">Int</span>) : <span class="type">Int</span> = &#123;</div><div class="line">      <span class="keyword">var</span> sum:<span class="type">Int</span> = <span class="number">0</span></div><div class="line">      sum = a + b</div><div class="line">      <span class="keyword">return</span> sum</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Scala会在变量后定义类型，这样就可以区别不同的函数了。</p>
<p>回到上面的栗子，一个类型是<code>SparkContext</code>，一个是<code>SparkSession</code>，这是Spark的数据类型；然后我们可以看到在函数末尾是冒号加<code>ReadConfig</code>，这里说的返回的数据类型是<code>ReadConfig</code>，也就是从MongoDB读取数据时使用的配置类型。（如果是Unit则不用返回任何数据，和Java类似）</p>
<p>是不是很好理解，在调用函数时，只要我们传递的第一个参数是不同类型，就会使用相应的函数。</p>
<p>都说Scala是一种函数式语言，函数是 Scala 语言的核心，看看Scala函数的特性，不说了，继续撸Scala了。</p>
<p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fwxknqcwf5j31cw0e0myu.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tNbRwly1fwxk5mgus2j30kk064t9d.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十八篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="scala" scheme="https://zhangslob.github.io/categories/scala/"/>
    
    
      <category term="scala" scheme="https://zhangslob.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>Spark实战（二）学习UDF</title>
    <link href="https://zhangslob.github.io/2018/10/29/Spark%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89%E5%AD%A6%E4%B9%A0UDF/"/>
    <id>https://zhangslob.github.io/2018/10/29/Spark实战（二）学习UDF/</id>
    <published>2018-10-29T03:15:55.000Z</published>
    <updated>2018-10-29T06:22:57.947Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十七篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<p>在开始正式数据处理之前，我觉得有必要去学习理解下UDF。</p>
<h1 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h1><p>UDF全称<code>User-Defined Functions</code>，用户自定义函数，是Spark SQL的一项功能，用于定义新的基于列的函数，这些函数扩展了Spark SQL的DSL用于转换数据集的词汇表。</p>
<p>我在databricks上找到一个比较简单理解的入门栗子：</p>
<h2 id="Register-the-function-as-a-UDF"><a href="#Register-the-function-as-a-UDF" class="headerlink" title="Register the function as a UDF"></a>Register the function as a UDF</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> squared = (s: <span class="type">Int</span>) =&gt; &#123;</div><div class="line">  s * s</div><div class="line">&#125;</div><div class="line">spark.udf.register(<span class="string">"square"</span>, squared)</div></pre></td></tr></table></figure>
<h2 id="Call-the-UDF-in-Spark-SQL"><a href="#Call-the-UDF-in-Spark-SQL" class="headerlink" title="Call the UDF in Spark SQL"></a>Call the UDF in Spark SQL</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spark.range(<span class="number">1</span>, <span class="number">20</span>).registerTempTable(<span class="string">"test"</span>)</div></pre></td></tr></table></figure>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%sql select id, square(id) as id_squared from test</div></pre></td></tr></table></figure>
<p>我理解就是先定义一个函数<code>squared</code>，返回输入数字的平方，然后register，并绑定<code>square</code>方法名为<code>square</code>，然后就在Spark SQL中直接使用<code>square</code>方法。</p>
<h1 id="实例一：温度转化"><a href="#实例一：温度转化" class="headerlink" title="实例一：温度转化"></a>实例一：温度转化</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></div><div class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">object</span> <span class="title">ScalaUDFExample</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]) &#123;</div><div class="line">    <span class="keyword">val</span> conf       = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"Scala UDF Example"</span>)</div><div class="line">    <span class="keyword">val</span> spark      = <span class="type">SparkSession</span>.builder().enableHiveSupport().config(conf).getOrCreate() </div><div class="line"></div><div class="line">    <span class="keyword">val</span> ds = spark.read.json(<span class="string">"temperatures.json"</span>)</div><div class="line">    ds.createOrReplaceTempView(<span class="string">"citytemps"</span>)</div><div class="line"></div><div class="line">    <span class="comment">// Register the UDF with our SparkSession </span></div><div class="line">    spark.udf.register(<span class="string">"CTOF"</span>, (degreesCelcius: <span class="type">Double</span>) =&gt; ((degreesCelcius * <span class="number">9.0</span> / <span class="number">5.0</span>) + <span class="number">32.0</span>))</div><div class="line"></div><div class="line">    spark.sql(<span class="string">"SELECT city, CTOF(avgLow) AS avgLowF, CTOF(avgHigh) AS avgHighF FROM citytemps"</span>).show()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将定义一个 UDF 来将以下 JSON 数据中的温度从摄氏度（degrees Celsius）转换为华氏度（degrees Fahrenheit）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"St. John's"</span>,<span class="string">"avgHigh"</span>:8.7,<span class="string">"avgLow"</span>:0.6&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Charlottetown"</span>,<span class="string">"avgHigh"</span>:9.7,<span class="string">"avgLow"</span>:0.9&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Halifax"</span>,<span class="string">"avgHigh"</span>:11.0,<span class="string">"avgLow"</span>:1.6&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Fredericton"</span>,<span class="string">"avgHigh"</span>:11.2,<span class="string">"avgLow"</span>:-0.5&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Quebec"</span>,<span class="string">"avgHigh"</span>:9.0,<span class="string">"avgLow"</span>:-1.0&#125;</div><div class="line">&#123;<span class="string">"city"</span>:<span class="string">"Montreal"</span>,<span class="string">"avgHigh"</span>:11.1,<span class="string">"avgLow"</span>:1.4&#125;</div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="实例二：时间转化"><a href="#实例二：时间转化" class="headerlink" title="实例二：时间转化"></a>实例二：时间转化</h1><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Purchase</span>(<span class="params">customer_id: <span class="type">Int</span>, purchase_id: <span class="type">Int</span>, date: <span class="type">String</span>, time: <span class="type">String</span>, tz: <span class="type">String</span>, amount:<span class="type">Double</span></span>)</span></div><div class="line"></div><div class="line"><span class="keyword">val</span> x = sc.parallelize(<span class="type">Array</span>(</div><div class="line">  <span class="type">Purchase</span>(<span class="number">123</span>, <span class="number">234</span>, <span class="string">"2007-12-12"</span>, <span class="string">"20:50"</span>, <span class="string">"UTC"</span>, <span class="number">500.99</span>),</div><div class="line">  <span class="type">Purchase</span>(<span class="number">123</span>, <span class="number">247</span>, <span class="string">"2007-12-12"</span>, <span class="string">"15:30"</span>, <span class="string">"PST"</span>, <span class="number">300.22</span>),</div><div class="line">  <span class="type">Purchase</span>(<span class="number">189</span>, <span class="number">254</span>, <span class="string">"2007-12-13"</span>, <span class="string">"00:50"</span>, <span class="string">"EST"</span>, <span class="number">122.19</span>),</div><div class="line">  <span class="type">Purchase</span>(<span class="number">187</span>, <span class="number">299</span>, <span class="string">"2007-12-12"</span>, <span class="string">"07:30"</span>, <span class="string">"UTC"</span>, <span class="number">524.37</span>)</div><div class="line">))</div><div class="line"></div><div class="line"><span class="keyword">val</span> df = sqlContext.createDataFrame(x)</div><div class="line">df.registerTempTable(<span class="string">"df"</span>)</div></pre></td></tr></table></figure>
<p>自定义函数</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeDT</span></span>(date: <span class="type">String</span>, time: <span class="type">String</span>, tz: <span class="type">String</span>) = <span class="string">s"<span class="subst">$date</span> <span class="subst">$time</span> <span class="subst">$tz</span>"</span></div><div class="line">sqlContext.udf.register(<span class="string">"makeDt"</span>, makeDT(_:<span class="type">String</span>,_:<span class="type">String</span>,_:<span class="type">String</span>))</div><div class="line"></div><div class="line"><span class="comment">// Now we can use our function directly in SparkSQL.</span></div><div class="line">sqlContext.sql(<span class="string">"SELECT amount, makeDt(date, time, tz) from df"</span>).take(<span class="number">2</span>)</div><div class="line"><span class="comment">// but not outside</span></div><div class="line">df.select($<span class="string">"customer_id"</span>, makeDt($<span class="string">"date"</span>, $<span class="string">"time"</span>, $<span class="string">"tz"</span>), $<span class="string">"amount"</span>).take(<span class="number">2</span>) <span class="comment">// fails</span></div></pre></td></tr></table></figure>
<p>如果想要在SQL外面使用，必须通过<code>spark.sql.function.udf</code>来创建UDF</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.apache.spark.sql.functions.udf</div><div class="line"><span class="keyword">val</span> makeDt = udf(makeDT(_:<span class="type">String</span>,_:<span class="type">String</span>,_:<span class="type">String</span>))</div><div class="line"><span class="comment">// now this works</span></div><div class="line">df.select($<span class="string">"customer_id"</span>, makeDt($<span class="string">"date"</span>, $<span class="string">"time"</span>, $<span class="string">"tz"</span>), $<span class="string">"amount"</span>).take(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<h1 id="实践操作"><a href="#实践操作" class="headerlink" title="实践操作"></a>实践操作</h1><p>写一个UDF来将一些Int数字分类</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> formatDistribution = (view: <span class="type">Int</span>) =&gt; &#123;</div><div class="line">  <span class="keyword">if</span> (view &lt; <span class="number">10</span>) &#123;</div><div class="line">    <span class="string">"&lt;10"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">100</span>) &#123;</div><div class="line">    <span class="string">"10~100"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">1000</span>) &#123;</div><div class="line">    <span class="string">"100~1K"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">10000</span>) &#123;</div><div class="line">    <span class="string">"1K~10K"</span></div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (view &lt;= <span class="number">100000</span>) &#123;</div><div class="line">    <span class="string">"10K~100K"</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="string">"&gt;100K"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.udf.register(<span class="string">"formatDistribution"</span>, <span class="type">UDF</span>.formatDistribution)</div></pre></td></tr></table></figure>
<p>SQL：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">session.sql(<span class="string">"select user_id, formatDistribution(variance_digg_count) as variance from video"</span>)</div></pre></td></tr></table></figure>
<p>写到这里，再回顾UDF，我感觉这就像是去为了方便做一个分类转化等操作，和Python里面的函数一样，只不过这里的UDF一般特指Spark SQL里面使用的函数。然后发现这里和SQL中的自定义函数挺像的:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> [函数所有者.]&lt;函数名称&gt; </div><div class="line">(   </div><div class="line">    <span class="comment">-- 添加函数所需的参数，可以没有参数</span></div><div class="line">    [&lt;@param1&gt; &lt;参数类型&gt;]</div><div class="line">    [,&lt;@param1&gt; &lt;参数类型&gt;]…</div><div class="line">)</div><div class="line"><span class="keyword">RETURNS</span> <span class="keyword">TABLE</span> </div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">RETURN</span> </div><div class="line">(</div><div class="line">    <span class="comment">-- 查询返回的SQL语句</span></div><div class="line">    <span class="keyword">SELECT</span>查询语句</div><div class="line">)</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line">* 创建内联表值函数，查询交易总额大于1W的开户人个人信息</div><div class="line">*/</div><div class="line"><span class="keyword">create</span> <span class="keyword">function</span> getCustInfo()</div><div class="line"><span class="keyword">returns</span> @CustInfo <span class="keyword">table</span>  <span class="comment">--返回table类型</span></div><div class="line">(</div><div class="line">    <span class="comment">--账户ID</span></div><div class="line">    CustID <span class="built_in">int</span>,</div><div class="line">    <span class="comment">--帐户名称</span></div><div class="line">    CustName <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    <span class="comment">--身份证号</span></div><div class="line">    IDCard <span class="built_in">varchar</span>(<span class="number">18</span>),</div><div class="line">    <span class="comment">--电话</span></div><div class="line">    TelePhone <span class="built_in">varchar</span>(<span class="number">13</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">    <span class="comment">--地址</span></div><div class="line">    Address <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">default</span>(<span class="string">'地址不详'</span>)</div><div class="line">)</div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">begin</span></div><div class="line">    <span class="comment">--为table表赋值</span></div><div class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> @CustInfo</div><div class="line">    <span class="keyword">select</span> CustID,CustName,IDCard,TelePhone,Address <span class="keyword">from</span> AccountInfo </div><div class="line">    <span class="keyword">where</span> CustID <span class="keyword">in</span> (<span class="keyword">select</span> CustID <span class="keyword">from</span> CardInfo </div><div class="line">    <span class="keyword">where</span> CardID <span class="keyword">in</span> (<span class="keyword">select</span> CardID <span class="keyword">from</span> TransInfo <span class="keyword">group</span> <span class="keyword">by</span> CardID,transID,TransType,TransMoney,TransDate <span class="keyword">having</span> <span class="keyword">sum</span>(TransMoney)&gt;<span class="number">10000</span>))</div><div class="line">    <span class="keyword">return</span></div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">go</span></div><div class="line"><span class="comment">-- 调用内联表值函数</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> getCustInfo()</div><div class="line"><span class="keyword">go</span></div></pre></td></tr></table></figure>
<p>好像有异曲同工之妙~</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十七篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark实战（一）：对数据处理的理解</title>
    <link href="https://zhangslob.github.io/2018/10/24/spark%E5%AE%9E%E6%88%98%E4%B8%80%EF%BC%9A%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://zhangslob.github.io/2018/10/24/spark实战一：对数据处理的理解/</id>
    <published>2018-10-24T03:05:16.000Z</published>
    <updated>2018-10-24T09:13:17.261Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十六篇原创文章</div></pre></td></tr></table></figure>
<hr>
<a id="more"></a>
<h1 id="大数据的学习经历"><a href="#大数据的学习经历" class="headerlink" title="大数据的学习经历"></a>大数据的学习经历</h1><p>大数据是什么，我觉得应该有这么几步：</p>
<ol>
<li>数据采集（Python&amp;&amp;Scrapy）</li>
<li>数据清洗（Scala&amp;&amp;Spark）</li>
<li>指标计算（Scala&amp;&amp;Spark）</li>
<li>数据展示（Postgre）</li>
</ol>
<p>做了一段时间的爬虫，或者说叫数据采集，但是从来没有接触到大数据的下一步。最近和慢慢聊了下，对数据处理也很感兴趣，便想去接触、尝试。</p>
<p>在慢慢、登登等人的帮助下，开始学习了一段时间的Spark。刚开始学习SQL语句，现在就记得简单的那些了。然后去看Spark文档，自己动手开始写。</p>
<p>因为团队主要用Scala开发，所以中途又花了一些时间来学习Scala语言，感觉和Python有许多类似的地方，并不是太难，但是Scala有一些特性，不是太明白，主要是自己写太少了。爬虫什么的还是用Python。</p>
<p>然后再去看具体的Spark 项目，模仿（抄袭）别人的代码，大概也看懂了一些，由于始终没有自己实践来操作，所以缺乏实际操作能力。最好的办法就是自己去写，所以计划自己去单独做一个项目试试看，手头上还有好多已开发但是还没开始计算的项目，我自己可以先试试看。</p>
<h1 id="大数据处理步骤"><a href="#大数据处理步骤" class="headerlink" title="大数据处理步骤"></a>大数据处理步骤</h1><p>在上面所说的基础上再说细一些。</p>
<ul>
<li>数据采集就别说了，就是采集我们所需要的（产品经理要求的）数据</li>
<li>数据清洗这里，是和数据采集有很大关系的。分为这么两步：<ul>
<li>提取指定数据。因为我们在做数据采集的时候，为了保证数据的完整性，是尽可能多的保存原始数据，也就是别人给多少，我就取多少，但是这些数据并非都是有用的数据，所以第一步是需要去提取原始数据表中我们所需要的指定数据。这里方法有很多，用SQL，或者在道路数据的时候直接选取那些字段即可。最后我们把这些提取的数据重新保存在新的表中，这样后面计算会方便很多。（其实这一步在数据采集就可以完成，但是谁也说不清到底以后会不会需要更多的数据）</li>
<li>清洗数据。比如时间维度、为空字段等等，这些现在遇到的还不多，以后再补上。</li>
</ul>
</li>
<li>指标计算。这一步就需要根据具体的需求来计算各种维度，并把计算好的数据保存新表。</li>
<li>数据展示。这部分好像是后端做的，待了解。</li>
</ul>
<h1 id="需要了解的知识"><a href="#需要了解的知识" class="headerlink" title="需要了解的知识"></a>需要了解的知识</h1><ol>
<li><p>开发工具和环境 </p>
<ol>
<li>MongoDB </li>
<li>Postgre </li>
<li>SQL，JOIN </li>
<li>Docker </li>
<li>IDEA、SBT </li>
<li>Scala（2.10+） </li>
</ol>
</li>
<li><p>Spark </p>
<ol>
<li>官方文档 </li>
<li>UDF </li>
</ol>
</li>
</ol>
<p>目前感觉以上部分都有一知半解，必须要实际去做才能知道到底那部分掌握，那部分还不懂。</p>
<h1 id="我的计划"><a href="#我的计划" class="headerlink" title="我的计划"></a>我的计划</h1><ol>
<li>找PM要DM文档，理解具体业务需求</li>
<li>根据需求来选择数据库中的数据维度</li>
<li>在本地尝试数据清洗并计算指标</li>
<li>有问题请教慢慢＆登登</li>
</ol>
<p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fwjf538h8bj30f50awgm6.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNbRwly1fwj6agtwwoj30ag05k3zb.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十六篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark教程（二）Spark连接MongoDB</title>
    <link href="https://zhangslob.github.io/2018/09/03/Spark%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89Spark%E8%BF%9E%E6%8E%A5MongoDB/"/>
    <id>https://zhangslob.github.io/2018/09/03/Spark教程（二）Spark连接MongoDB/</id>
    <published>2018-09-03T14:00:59.000Z</published>
    <updated>2018-09-03T14:07:13.658Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十五篇原创文章</div></pre></td></tr></table></figure>
<p>学习Spark  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="如何导入数据"><a href="#如何导入数据" class="headerlink" title="如何导入数据"></a>如何导入数据</h1><p>数据可能有各种格式，虽然常见的是<code>HDFS</code>，但是因为在Python爬虫中数据库用的比较多的是<code>MongoDB</code>，所以这里会重点说说如何用spark导入<code>MongoDB</code>中的数据。</p>
<p>当然，首先你需要在自己电脑上安装spark环境，简单说下，在这里<a href="http://spark.apache.org/downloads.html" target="_blank" rel="external">下载spark</a>，同时需要配置好<code>JAVA</code>，<code>Scala</code>环境。</p>
<p>这里建议使用<code>Jupyter notebook</code>，会比较方便，在环境变量中这样设置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PYSPARK_DRIVER_PYTHON=jupyter </div><div class="line">PYSPARK_DRIVER_PYTHON_OPTS=notebook ./bin/pyspark</div></pre></td></tr></table></figure>
<p>如果你的环境中有多个Python版本，同样可以制定你想要使用的解释器，我这里是<code>python36</code>，根据需求修改。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PYSPARK_PYTHON=/usr/bin/python36</div></pre></td></tr></table></figure>
<h1 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h1><p>进入spark根目录，<code>./bin/pyspark</code>这是最简单的启动命令，默认会打开Python的交互式解释器，但是由于我们上面有设置过，会打开<code>Jupyter notebook</code>，接下来变成会方便很多。</p>
<p>先来看看最简单的例子：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; textFile = spark.read.text(<span class="string">"README.md"</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt; textFile.count()  <span class="comment"># Number of rows in this DataFrame</span></div><div class="line">126</div><div class="line"></div><div class="line">&gt;&gt;&gt; textFile.first()  <span class="comment"># First row in this DataFrame</span></div><div class="line">Row(value=u<span class="string">'# Apache Spark'</span>)</div><div class="line"></div><div class="line">&gt;&gt;&gt; linesWithSpark = textFile.filter(textFile.value.contains(<span class="string">"Spark"</span>))</div><div class="line"></div><div class="line"></div><div class="line">&gt;&gt;&gt; textFile.filter(textFile.value.contains(<span class="string">"Spark"</span>)).count()  <span class="comment"># How many lines contain "Spark"?</span></div><div class="line">15</div></pre></td></tr></table></figure>
<p>这里有我之前写过的例子，可以照着写一遍 <a href="https://github.com/zhangslob/learning-spark/blob/master/code/Python/basic_exercise.ipynb" target="_blank" rel="external">basic_exercise</a></p>
<p>我们的启动方式是<code>./bin/pyspark</code>，我们可以家后面加很多参数，比如说如若我们要连接MongoDB，就需要这样</p>
<p>完整的可以参考<a href="https://docs.mongodb.com/spark-connector/master/python-api/" target="_blank" rel="external">Spark Connector Python Guide</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./bin/pyspark --conf <span class="string">"spark.mongodb.input.uri=mongodb://127.0.0.1/test.myCollection?readPreference=primaryPreferred"</span> \</div><div class="line">              --conf <span class="string">"spark.mongodb.output.uri=mongodb://127.0.0.1/test.myCollection"</span> \</div><div class="line">              --packages org.mongodb.spark:mongo-spark-connector_2.11:2.3.0</div></pre></td></tr></table></figure>
<p>这里有两个<code>uri</code>，分别是<code>input</code>和<code>output</code>，对应读取的数据库和写入的数据库，最后面的<code>packages</code>相当于引入的包的名字，我一般喜欢在代码中定义。</p>
<h1 id="读取-保存数据"><a href="#读取-保存数据" class="headerlink" title="读取/保存数据"></a>读取/保存数据</h1><p>这里我们可以增加参数<code>option</code>，在这里设置想要读取的数据库地址，注意格式。</p>
<p>读取数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">df = spark.read.format(<span class="string">"com.mongodb.spark.sql.DefaultSource"</span>).option(<span class="string">"uri"</span>,</div><div class="line"><span class="string">"mongodb://127.0.0.1/people.contacts"</span>).load()</div></pre></td></tr></table></figure>
<p>保存数据</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">people.write.format(<span class="string">"com.mongodb.spark.sql.DefaultSource"</span>).mode(<span class="string">"append"</span>).option(<span class="string">"uri"</span>,</div><div class="line"><span class="string">"mongodb://127.0.0.1/people.contacts"</span>).option(<span class="string">"database"</span>,</div><div class="line"><span class="string">"people"</span>).option(<span class="string">"collection"</span>, <span class="string">"contacts"</span>).save()</div></pre></td></tr></table></figure>
<p>简单对比下，<code>option</code>还可以定义<code>database</code>和<code>collection</code>，这样就不需要在启动Spark时定义。</p>
<p>以上是官网推荐的连接方式，这里需要说的是另一种，如果我没有从命令行中启动，而是直接新建一个py文件，该如何操作？</p>
<p>搜索相关资料后，发现是这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line">__author__ = <span class="string">'zhangslob'</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</div><div class="line"></div><div class="line"><span class="comment"># set PYSPARK_PYTHON to python36</span></div><div class="line">os.environ[<span class="string">'PYSPARK_PYTHON'</span>] = <span class="string">'/usr/bin/python36'</span></div><div class="line"></div><div class="line"><span class="comment"># load mongo data</span></div><div class="line">input_uri = <span class="string">"mongodb://127.0.0.1:spark.spark_test"</span></div><div class="line">output_uri = <span class="string">"mongodb://127.0.0.1:spark.spark_test"</span></div><div class="line"></div><div class="line">my_spark = SparkSession\</div><div class="line">    .builder\</div><div class="line">    .appName(<span class="string">"MyApp"</span>)\</div><div class="line">    .config(<span class="string">"spark.mongodb.input.uri"</span>, input_uri)\</div><div class="line">    .config(<span class="string">"spark.mongodb.output.uri"</span>, output_uri)\</div><div class="line">    .config(<span class="string">'spark.jars.packages'</span>,<span class="string">'org.mongodb.spark:mongo-spark-connector_2.11:2.2.0'</span>)\</div><div class="line">    .getOrCreate()</div><div class="line"></div><div class="line">df = my_spark.read.format(<span class="string">'com.mongodb.spark.sql.DefaultSource'</span>).load()</div></pre></td></tr></table></figure>
<p>必须要增加默认设置<code>(&#39;spark.jars.packages&#39;,&#39;org.mongodb.spark:mongo-spark-connector_2.11:2.2.0&#39;)</code>，否则会报错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十五篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;学习Spark  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>Spark教程（一）为什么要学spark</title>
    <link href="https://zhangslob.github.io/2018/09/01/Spark%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6spark/"/>
    <id>https://zhangslob.github.io/2018/09/01/Spark教程（一）为什么要学spark/</id>
    <published>2018-09-01T14:00:50.000Z</published>
    <updated>2018-09-03T14:05:47.548Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十四篇原创文章</div></pre></td></tr></table></figure>
<p>学习Spark  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Apache Spark是一个开源集群运算框架，最初是由加州大学柏克莱分校AMPLab所开发。相对于Hadoop的MapReduce会在运行完工作后将中介数据存放到磁盘中，Spark使用了存储器内运算技术，能在数据尚未写入硬盘时即在存储器内分析运算。</p>
<p>Spark在存储器内运行程序的运算速度能做到比Hadoop MapReduce的运算速度快上100倍，即便是运行程序于硬盘时，Spark也能快上10倍速度。Spark允许用户将数据加载至集群存储器，并多次对其进行查询，非常适合用于机器学习算法</p>
<p>Spark也支持伪分布式（pseudo-distributed）本地模式，不过通常只用于开发或测试时以本机文件系统取代分布式存储系统。在这样的情况下，Spark仅在一台机器上使用每个CPU核心运行程序。</p>
<blockquote>
<p>Apache Spark™ is a unified analytics engine for large-scale data processing.</p>
</blockquote>
<h1 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h1><ol>
<li>首先，Spark为我们提供了一个全面、统一的框架用于管理各种有着不同性质（文本数据、图表数据等）的数据集和数据源（批量数据或实时的流数据）的大数据处理的需求。</li>
<li>Spark可以将Hadoop集群中的应用在内存中的运行速度提升100倍，甚至能够将应用在磁盘上的运行速度提升10倍。</li>
<li>Spark让开发者可以快速的用Java、Scala或Python编写程序。它本身自带了一个超过80个高阶操作符集合。而且还可以用它在shell中以交互式地查询数据。</li>
<li>除了Map和Reduce操作之外，它还支持SQL查询，流数据，机器学习和图表数据处理。开发者可以在一个数据管道用例中单独使用某一能力或者将这些能力结合在一起使用。</li>
</ol>
<p><img src="https://pic4.zhimg.com/80/v2-9fad838af226986154c0053b0b59d337_hd.jpg" alt=""></p>
<h1 id="亲身体会"><a href="#亲身体会" class="headerlink" title="亲身体会"></a>亲身体会</h1><p>经过这两周的折腾，总算是在本地环境下完成了第一个spark项目，完成十万级文本分词和去重，速度还是挺快的，从读取数据、处理数据、再到保存数据，大概花了十分钟左右。这里操作的数据库都是MongoDB，因为爬虫爬取的数据都是直接保存到Mongo。</p>
<p>之后再增加数据量，达到四千多万，读取数据花了8分钟，下图是正在处理和保存数据的Spark UI。</p>
<p><img src="https://pic1.zhimg.com/v2-297ea8af7b3cce137f8e49aeec10295d_r.jpg" alt=""></p>
<p>以前处理数据会使用pandas，数据会保存在内存中，数据量过大就会崩了，这也是为什么要使用分布式计算的原因。没有做过横向对比，暂时还不知道有多大差别。</p>
<p>最后花了1.3h，本地处理完了四千多万数据，CPU和内存都要炸了，看来以后计算部分还是要搭集群。</p>
<p><img src="https://pic1.zhimg.com/v2-da6f75baee44298362382c4fdfda51fa_r.jpg" alt=""></p>
<h1 id="学习计划"><a href="#学习计划" class="headerlink" title="学习计划"></a>学习计划</h1><p>我在Github上开了一个仓库，记录所学，地址在这：<a href="https://github.com/zhangslob/learning-spark" target="_blank" rel="external">learning-spark</a></p>
<p>刚开始使用的语言还是Python，目标是学Scala，看了些基础语法，和Python挺类似的，以后多写写，维持这个项目，记录各种坑。</p>
<p>ok，BB了这么多，下一篇就要开始真正的代码实战了。</p>
<p><img src="https://pic3.zhimg.com/80/v2-7b58d87198c657329a93350c480cc75e_hd.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-4d4095947c89bd7dc59b691aec7fb0ed_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十四篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;学习Spark  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="spark" scheme="https://zhangslob.github.io/categories/spark/"/>
    
    
      <category term="spark" scheme="https://zhangslob.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>使用scrapy发送post请求的坑</title>
    <link href="https://zhangslob.github.io/2018/08/24/%E4%BD%BF%E7%94%A8scrapy%E5%8F%91%E9%80%81post%E8%AF%B7%E6%B1%82%E7%9A%84%E5%9D%91/"/>
    <id>https://zhangslob.github.io/2018/08/24/使用scrapy发送post请求的坑/</id>
    <published>2018-08-24T13:54:28.000Z</published>
    <updated>2018-09-03T13:59:38.696Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic1.zhimg.com/v2-4a7e42516aa3fc2ad8c5532d885e3c44_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十三篇原创文章</div></pre></td></tr></table></figure>
<p>使用scrapy发送post请求的坑</p>
<a id="more"></a>
<h1 id="使用requests发送post请求"><a href="#使用requests发送post请求" class="headerlink" title="使用requests发送post请求"></a>使用requests发送post请求</h1><p>先来看看使用requests来发送post请求是多少好用，发送请求</p>
<p>Requests 简便的 API 意味着所有 HTTP 请求类型都是显而易见的。例如，你可以这样发送一个 HTTP POST 请求：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data = &#123;<span class="string">'key'</span>:<span class="string">'value'</span>&#125;)</div></pre></td></tr></table></figure>
<p>使用data可以传递字典作为参数，同时也可以传递元祖</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = ((<span class="string">'key1'</span>, <span class="string">'value1'</span>), (<span class="string">'key1'</span>, <span class="string">'value2'</span>))</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(<span class="string">'http://httpbin.org/post'</span>, data=payload)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>print(r.text)</div><div class="line">&#123;</div><div class="line">  ...</div><div class="line">  <span class="string">"form"</span>: &#123;</div><div class="line">    <span class="string">"key1"</span>: [</div><div class="line">      <span class="string">"value1"</span>,</div><div class="line">      <span class="string">"value2"</span></div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传递json是这样</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, data=json.dumps(payload))</div></pre></td></tr></table></figure>
<p>2.4.2 版的新加功能：</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>url = <span class="string">'https://api.github.com/some/endpoint'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>payload = &#123;<span class="string">'some'</span>: <span class="string">'data'</span>&#125;</div><div class="line"></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.post(url, json=payload)</div></pre></td></tr></table></figure>
<p>也就是说，你不需要对参数做什么变化，只需要关注使用data=还是json=，其余的requests都已经帮你做好了。</p>
<h1 id="使用scrapy发送post请求"><a href="#使用scrapy发送post请求" class="headerlink" title="使用scrapy发送post请求"></a>使用scrapy发送post请求</h1><p>官方推荐的 Using FormRequest to send data via HTTP POST</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> [FormRequest(url=<span class="string">"http://www.example.com/post/action"</span>,</div><div class="line">                    formdata=&#123;<span class="string">'name'</span>: <span class="string">'John Doe'</span>, <span class="string">'age'</span>: <span class="string">'27'</span>&#125;,</div><div class="line">                    callback=self.after_post)]</div></pre></td></tr></table></figure>
<p>这里使用的是FormRequest，并使用formdata传递参数，看到这里也是一个字典。</p>
<p>但是，超级坑的一点来了，今天折腾了一下午，使用这种方法发送请求，怎么发都会出问题，返回的数据一直都不是我想要的</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> scrapy.FormRequest(url, formdata=(payload))</div></pre></td></tr></table></figure>
<p>在网上找了很久，最终找到一种方法，使用scrapy.Request发送请求，就可以正常的获取数据。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> scrapy.Request(url, body=json.dumps(payload), method=<span class="string">'POST'</span>, headers=&#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,)</div></pre></td></tr></table></figure>
<p>参考：Send Post Request in Scrapy</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">my_data = &#123;<span class="string">'field1'</span>: <span class="string">'value1'</span>, <span class="string">'field2'</span>: <span class="string">'value2'</span>&#125;</div><div class="line">request = scrapy.Request( url, method=<span class="string">'POST'</span>, </div><div class="line">                          body=json.dumps(my_data), </div><div class="line">                          headers=&#123;<span class="string">'Content-Type'</span>:<span class="string">'application/json'</span>&#125; )</div></pre></td></tr></table></figure>
<h1 id="FormRequest-与-Request-区别"><a href="#FormRequest-与-Request-区别" class="headerlink" title="FormRequest 与 Request 区别"></a>FormRequest 与 Request 区别</h1><p>在文档中，几乎看不到差别，</p>
<blockquote>
<p>The FormRequest class adds a new argument to the constructor. The remaining arguments are the same as for the Request class and are not documented here.</p>
<p>Parameters:    formdata (dict or iterable of tuples) – is a dictionary (or iterable of (key, value) tuples) containing HTML Form data which will be url-encoded and assigned to the body of the request.</p>
</blockquote>
<p>说FormRequest新增加了一个参数formdata，接受包含表单数据的字典或者可迭代的元组，并将其转化为请求的body。并且FormRequest是继承Request的</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FormRequest</span><span class="params">(Request)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></div><div class="line">        formdata = kwargs.pop(<span class="string">'formdata'</span>, <span class="keyword">None</span>)</div><div class="line">        <span class="keyword">if</span> formdata <span class="keyword">and</span> kwargs.get(<span class="string">'method'</span>) <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            kwargs[<span class="string">'method'</span>] = <span class="string">'POST'</span></div><div class="line"></div><div class="line">        super(FormRequest, self).__init__(*args, **kwargs)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> formdata:</div><div class="line">            items = formdata.items() <span class="keyword">if</span> isinstance(formdata, dict) <span class="keyword">else</span> formdata</div><div class="line">            querystr = _urlencode(items, self.encoding)</div><div class="line">            <span class="keyword">if</span> self.method == <span class="string">'POST'</span>:</div><div class="line">                self.headers.setdefault(<span class="string">b'Content-Type'</span>, <span class="string">b'application/x-www-form-urlencoded'</span>)</div><div class="line">                self._set_body(querystr)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                self._set_url(self.url + (<span class="string">'&amp;'</span> <span class="keyword">if</span> <span class="string">'?'</span> <span class="keyword">in</span> self.url <span class="keyword">else</span> <span class="string">'?'</span>) + querystr)</div><div class="line">            <span class="comment">###</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_urlencode</span><span class="params">(seq, enc)</span>:</span></div><div class="line">    values = [(to_bytes(k, enc), to_bytes(v, enc))</div><div class="line">              <span class="keyword">for</span> k, vs <span class="keyword">in</span> seq</div><div class="line">              <span class="keyword">for</span> v <span class="keyword">in</span> (vs <span class="keyword">if</span> is_listlike(vs) <span class="keyword">else</span> [vs])]</div><div class="line">    <span class="keyword">return</span> urlencode(values, doseq=<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>最终我们传递的{‘key’: ‘value’, ‘k’: ‘v’}会被转化为’key=value&amp;k=v’ 并且默认的method是POST，再来看看Request</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(object_ref)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, url, callback=None, method=<span class="string">'GET'</span>, headers=None, body=None,</span></span></div><div class="line">                 cookies=None, meta=None, encoding=<span class="string">'utf-8'</span>, priority=<span class="number">0</span>,</div><div class="line">                 dont_filter=False, errback=None, flags=None):</div><div class="line"></div><div class="line">        self._encoding = encoding  <span class="comment"># this one has to be set first</span></div><div class="line">        self.method = str(method).upper()</div></pre></td></tr></table></figure>
<p>默认的方法是GET，其实并不影响。仍然可以发送post请求。这让我想起来requests中的request用法，这是定义请求的基础方法。</p>
<figure class="highlight py"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(method, url, **kwargs)</span>:</span></div><div class="line">    <span class="string">"""Constructs and sends a :class:`Request &lt;Request&gt;`.</span></div><div class="line"></div><div class="line">    :param method: method for the new :class:`Request` object.</div><div class="line">    :param url: URL for the new :class:`Request` object.</div><div class="line">    :param params: (optional) Dictionary or bytes to be sent in the query string for the :class:`Request`.</div><div class="line">    :param data: (optional) Dictionary or list of tuples ``[(key, value)]`` (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.</div><div class="line">    :param json: (optional) json data to send in the body of the :class:`Request`.</div><div class="line">    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.</div><div class="line">    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.</div><div class="line">    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``&#123;'name': file-tuple&#125;``) for multipart encoding upload.</div><div class="line">        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``</div><div class="line">        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content-type'`` is a string</div><div class="line">        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers</div><div class="line">        to add for the file.</div><div class="line">    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.</div><div class="line">    :param timeout: (optional) How many seconds to wait for the server to send data</div><div class="line">        before giving up, as a float, or a :ref:`(connect timeout, read</div><div class="line">        timeout) &lt;timeouts&gt;` tuple.</div><div class="line">    :type timeout: float or tuple</div><div class="line">    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.</div><div class="line">    :type allow_redirects: bool</div><div class="line">    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.</div><div class="line">    :param verify: (optional) Either a boolean, in which case it controls whether we verify</div><div class="line">            the server's TLS certificate, or a string, in which case it must be a path</div><div class="line">            to a CA bundle to use. Defaults to ``True``.</div><div class="line">    :param stream: (optional) if ``False``, the response content will be immediately downloaded.</div><div class="line">    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.</div><div class="line">    :return: :class:`Response &lt;Response&gt;` object</div><div class="line">    :rtype: requests.Response</div><div class="line"></div><div class="line">    Usage::</div><div class="line"></div><div class="line">      &gt;&gt;&gt; import requests</div><div class="line">      &gt;&gt;&gt; req = requests.request('GET', 'http://httpbin.org/get')</div><div class="line">      &lt;Response [200]&gt;</div><div class="line">    """</div><div class="line"></div><div class="line">    <span class="comment"># By using the 'with' statement we are sure the session is closed, thus we</span></div><div class="line">    <span class="comment"># avoid leaving sockets open which can trigger a ResourceWarning in some</span></div><div class="line">    <span class="comment"># cases, and look like a memory leak in others.</span></div><div class="line">    <span class="keyword">with</span> sessions.Session() <span class="keyword">as</span> session:</div><div class="line">        <span class="keyword">return</span> session.request(method=method, url=url, **kwargs)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-4a7e42516aa3fc2ad8c5532d885e3c44_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十三篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用scrapy发送post请求的坑&lt;/p&gt;
    
    </summary>
    
      <category term="爬虫" scheme="https://zhangslob.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
      <category term="scrapy" scheme="https://zhangslob.github.io/tags/scrapy/"/>
    
      <category term="post" scheme="https://zhangslob.github.io/tags/post/"/>
    
  </entry>
  
  <entry>
    <title>淘宝sign加密算法</title>
    <link href="https://zhangslob.github.io/2018/08/14/%E6%B7%98%E5%AE%9Dsign%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    <id>https://zhangslob.github.io/2018/08/14/淘宝sign加密算法/</id>
    <published>2018-08-14T13:50:33.000Z</published>
    <updated>2018-09-03T13:56:28.816Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pic4.zhimg.com/v2-1b87ba90b26d4a65d78146dcee21a40e_1200x500.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十二篇原创文章</div></pre></td></tr></table></figure>
<p>淘宝sign加密算法</p>
<a id="more"></a>
<h1 id="淘宝sign加密算法"><a href="#淘宝sign加密算法" class="headerlink" title="淘宝sign加密算法"></a>淘宝sign加密算法</h1><p>淘宝对于h5的访问采用了和客户端不同的方式，由于在h5的js代码中保存appsercret具有较高的风险，mtop采用了随机分配令牌的方式，为每个访问端分配一个token，保存在用户的cookie中，通过cookie带回服务端分配的token, 客户端利用分配的token对请求的URL参数生成摘要值sign,</p>
<p>MTOP利用这个摘用值和cookie中的token来防止URL篡改。</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol>
<li>当本地cookie中的token为空时（通常是第一次访问），mtop会收到”FAIL_SYS_TOKEN_EXOIRED:: 令牌过期“这个错误应答，同时mtop会生成token写入cookie中（response.cookies）。</li>
<li>第二次请求时，js通过读取cookie中的token值，按照约定的算法生成sign, sign在mtop的请求中带上，mtop通过cookie中和token用同样的方式计算出sign,与请求的sign进行比较，检查通过将返回api的应答，失败提示“FAIL_SYS_ILLEGAL_ACCESS:: 非法请求”</li>
<li>cookie中的token是有时效性的，遇到token失效时，将收到应答”FAIL_SYS_TOKEN_EXOIRED:: 令牌过期”, 同时会写入新的token,js利用新的token重新计算sign并重发请求。</li>
</ol>
<p>关于cookie中的token的自我检查，由于token在cookie中是明文的，可能会被仿冒，在输出的cookie中包含一个用非对称密钥的公钥加密后的token, MTOP在每次请求时会先检查cookie中的token是否是由服务端分配出去的（利用加密后的token和私钥还原token，与回传的明文token比较）</p>
<h1 id="sign-生成"><a href="#sign-生成" class="headerlink" title="sign 生成"></a>sign 生成</h1><p>关于sign的生成公式：</p>
<p><code>md5Hex(token&amp;t&amp;appKey&amp;data)</code></p>
<p>如：md5Hex(“645d1f414d4914297dfaab40f3f76016 &amp;1234&amp;4272&amp;{“itemNumId”:”1500011132496”}”)</p>
<p>sign=d2b2f818a03496b296b899a230c03abd</p>
<h1 id="token"><a href="#token" class="headerlink" title="token"></a>token</h1><p>关于cookie的有效时长，cookie的有效时长为7天，但是token的有效时长目前为60分钟<br>_m_h5_tk: 格式为 明文token_expireTime, 从response.cookies处获取，如： <code>2fcd2baa62fc60f73c0487a9f8a0a9d1_1362559577301</code></p>
<p>token就是2fcd2baa62fc60f73c0487a9f8a0a9d1</p>
<p>t<br>很简单，即时间戳 int(time.time()*1000)</p>
<p>appKey<br>一般是固定数值</p>
<p>data<br>一般是提交的参数</p>
<p>example<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'accept-encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">    <span class="string">'accept-language'</span>: <span class="string">'zh-CN,zh;q=0.9,en;q=0.8,zh-TW;q=0.7'</span>,</div><div class="line">    <span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1'</span>,</div><div class="line">    <span class="string">'accept'</span>: <span class="string">'*/*'</span>,</div><div class="line">    <span class="string">'referer'</span>: <span class="string">'https://h5.m.taobao.com/?sprefer=sypc00'</span>,</div><div class="line">    <span class="string">'authority'</span>: <span class="string">'h5api.m.taobao.com'</span>,</div><div class="line">    <span class="string">'cookie'</span>: <span class="string">'t=cff5759b3198bafb639030a7296d6bff; cna=OOz3EwDBHU8CAS9eVNkZGaaY; thw=cn; _m_h5_tk=4dab06478749cf71bcb31296c169e46f_1534260967070; _m_h5_tk_enc=eb5abdfc8a3e52d0f7982d2ab34eb471; isg=BH9_A4W7GMQHLxzbVJKP32QcDlqleywDp44sWxFMGy51IJ-iGTRjVv02ZvbeeKt-'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">params = (</div><div class="line">    (<span class="string">'jsv'</span>, <span class="string">'2.4.11'</span>),</div><div class="line">    (<span class="string">'appKey'</span>, <span class="string">'12574478'</span>),</div><div class="line">    (<span class="string">'t'</span>, <span class="string">'1534253767277'</span>),</div><div class="line">    (<span class="string">'sign'</span>, <span class="string">'12c6fac6a03cf98c8f912413feeaeaaf'</span>),</div><div class="line">    (<span class="string">'api'</span>, <span class="string">'mtop.taobao.wireless.home.load'</span>),</div><div class="line">    (<span class="string">'v'</span>, <span class="string">'1.0'</span>),</div><div class="line">    (<span class="string">'type'</span>, <span class="string">'jsonp'</span>),</div><div class="line">    (<span class="string">'dataType'</span>, <span class="string">'jsonp'</span>),</div><div class="line">    (<span class="string">'callback'</span>, <span class="string">'mtopjsonp2'</span>),</div><div class="line">    (<span class="string">'data'</span>, <span class="string">'&#123;"containerId":"main","ext":"&#123;\\"h5_platform\\":\\"h5\\",\\"h5_ttid\\":\\"60000@taobao_h5_1.0.0\\"&#125;"&#125;'</span>),</div><div class="line">)</div><div class="line"></div><div class="line">response = requests.get(<span class="string">'https://h5api.m.taobao.com/h5/mtop.taobao.wireless.home.load/1.0/'</span>, headers=headers, params=params)</div></pre></td></tr></table></figure></p>
<h1 id="如何寻找"><a href="#如何寻找" class="headerlink" title="如何寻找"></a>如何寻找</h1><p>看下面这段js</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># https://g.alicdn.com/hollywood/hollywood-lib/2.0.2/mtop.js</div><div class="line"></div><div class="line">if (d.H5Request === !0) &#123;</div><div class="line">    var f = "//" + (d.prefix ? d.prefix + "." : "") + (d.subDomain ? d.subDomain + "." : "") + d.mainDomain + "/h5/" + c.api.toLowerCase() + "/" + c.v.toLowerCase() + "/"</div><div class="line">      , g = c.appKey || ("waptest" === d.subDomain ? "4272" : "12574478")</div><div class="line">      , i = (new Date).getTime()</div><div class="line">      , j = h(d.token + "&amp;" + i + "&amp;" + g + "&amp;" + c.data)</div><div class="line">      , k = &#123;</div><div class="line">        jsv: w,</div><div class="line">        appKey: g,</div><div class="line">        t: i,</div><div class="line">        sign: j</div><div class="line">    &#125;</div><div class="line">      , l = &#123;</div><div class="line">        data: c.data,</div><div class="line">        ua: c.ua</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<p>你可能会问，如何寻找，答案是js断点，一步步调试。</p>
<p>有兴趣的可以持续关注，以后会深入。</p>
<p>好久都没法东西了，主要是最近太忙，加班比较多；自己也变懒了，也在学一些新东西，就不知道写什么好，以后还是勤快点吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-1b87ba90b26d4a65d78146dcee21a40e_1200x500.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十二篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;淘宝sign加密算法&lt;/p&gt;
    
    </summary>
    
      <category term="加密算法" scheme="https://zhangslob.github.io/categories/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="淘宝" scheme="https://zhangslob.github.io/tags/%E6%B7%98%E5%AE%9D/"/>
    
      <category term="加密" scheme="https://zhangslob.github.io/tags/%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程（一）</title>
    <link href="https://zhangslob.github.io/2018/07/28/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://zhangslob.github.io/2018/07/28/Python多线程（一）/</id>
    <published>2018-07-28T07:01:34.000Z</published>
    <updated>2018-07-28T08:13:29.170Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.cn314.com/d/file/xinpin/452214b5930752f61039756c8dc70d67.jpg" alt=""></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">这是崔斯特的第六十一篇原创文章</div></pre></td></tr></table></figure>
<p>记录自己对多线程的理解  (๑• . •๑)</p>
<a id="more"></a>
<h1 id="线程与影分身"><a href="#线程与影分身" class="headerlink" title="线程与影分身"></a>线程与影分身</h1><p>多线程就是鸣人的<code>影分身之术</code>，可能不大恰当，但是非常容易理解。</p>
<p><img src="https://cf-darren0322.zi.org.tw/wp-content/uploads/2017/09/1504614882-afaa0c0f0d32fd75d061c2aeff07b38f.jpg" alt=""></p>
<p>平时一个鸣人会一个人，但是遇到强敌时，他会使用<code>影分身之术</code>，召唤自己的兄弟来帮助他一起来战斗。这样，他就从一个人战斗变成多个人战斗。</p>
<p>多线程也是这样，平时一个线程去做某件事，当使用多线程后，就会有很多个线程按照命令去做事，就像影分身一样。</p>
<h1 id="Python使用"><a href="#Python使用" class="headerlink" title="Python使用"></a>Python使用</h1><p>鸣人和使用需要先结印</p>
<p><img src="http://i0.qhmsg.com/t01ccd9cfd17482901d.jpg" alt=""></p>
<p>Python 中需要先调用，让我们看一个简单的例子：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shadow</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'产生了第&#123;&#125;个分身...'</span>.format(num))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</div><div class="line">    t = threading.Thread(target=shadow, args=(i,))</div><div class="line">    t.start()</div><div class="line">    t.join()</div></pre></td></tr></table></figure>
<p>Output</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">产生了第1个分身...</div><div class="line">产生了第2个分身...</div><div class="line">产生了第3个分身...</div><div class="line">产生了第4个分身...</div><div class="line">产生了第5个分身...</div></pre></td></tr></table></figure>
<p>可以看出用法非常简单，只需要先导入<code>threading</code>模块，然后实例化一个线程对象，注意<code>args是</code>元祖</p>
<p><code>t = threading.Thread(target=shadow, args=(i,))</code></p>
<p>线程被创建之后并不会马上运行，需要手动调用 <code>start()</code> ， <code>join()</code> 让调用它的线程一直等待直到执行结束： </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">t.start()</div><div class="line">t.join()</div></pre></td></tr></table></figure>
<h1 id="查看线程名字"><a href="#查看线程名字" class="headerlink" title="查看线程名字"></a>查看线程名字</h1><p>上述例子中，我们只知道产生了多个线程，但还是并不知道具体是哪个线程，如果某个线程出错了，我们没法去追踪，所以我们可以给线程加上名字。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shadow</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'&#123;&#125;产生了第&#123;&#125;个分身...'</span>.format(threading.currentThread().getName(), num))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</div><div class="line">    t = threading.Thread(target=shadow, args=(i,), name=<span class="string">'第&#123;&#125;个鸣人'</span>.format(i))</div><div class="line">    t.start()</div><div class="line">    t.join()</div></pre></td></tr></table></figure>
<p>Out:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">第1个鸣人产生了第1个分身...</div><div class="line">第2个鸣人产生了第2个分身...</div><div class="line">第3个鸣人产生了第3个分身...</div><div class="line">第4个鸣人产生了第4个分身...</div><div class="line">第5个鸣人产生了第5个分身...</div></pre></td></tr></table></figure>
<p>当然，你可以这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> threading</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">shadow</span><span class="params">(num)</span>:</span></div><div class="line">    print(<span class="string">'&#123;&#125;产生了第&#123;&#125;个分身...'</span>.format(threading.currentThread().getName(), num))</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">6</span>):</div><div class="line">    t = threading.Thread(target=shadow, args=(i,))</div><div class="line">    t.start()</div><div class="line">    t.join()</div><div class="line"></div><div class="line">print(threading.currentThread().getName())</div></pre></td></tr></table></figure>
<p>Out</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread-1产生了第1个分身...</div><div class="line">Thread-2产生了第2个分身...</div><div class="line">Thread-3产生了第3个分身...</div><div class="line">Thread-4产生了第4个分身...</div><div class="line">Thread-5产生了第5个分身...</div><div class="line">MainThread</div></pre></td></tr></table></figure>
<p>你可以看到在所有创建的线程结束后，我们打印当前线程名字，就是主线程<code>MainThread</code></p>
<h1 id="什么时候使用join"><a href="#什么时候使用join" class="headerlink" title="什么时候使用join"></a>什么时候使用join</h1><p>刚开始学多线程时，有个问题困扰了我很久，就是什么时候使用<code>join()</code></p>
<p>缕一缕步骤：</p>
<ol>
<li>主线程中创建子线程t</li>
<li>开始线程<code>t.star()</code></li>
<li>调用<code>t.join()</code></li>
<li>阻塞：等待子线程t结束后，再执行接下来的任务</li>
</ol>
<p>也就是说使用了<code>join()</code>后会阻塞当前的线程，只有这个线程执行完毕后才会接着走。要是一直不结束呢？你可以加上超时时间，如<code>t.join(timeout=10)</code></p>
<h1 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h1><p>鸣人使用影分身后，产生了A、B、C三个小鸣人，鸣人可以使用<code>join()</code>方法，让B在A耗尽查克拉之后再进行攻击，如果没有使用<code>join()</code>，那么就会是这样的场景，大家一起上</p>
<p><img src="https://image.ibb.co/b2AhW8/u_2086124472_3070676486_fm_173_s_C0983_F9_F4_C024_EDA8415_FC6803003079_w_500_h_314_img.jpg" alt=""></p>
<p>这个时候如果鸣人命令A、B同时去写家庭作业，那么可能会产生什么情况呢？A先写还是B先写，大家可以想想。</p>
<p>下一期会说说 <strong>锁 </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.cn314.com/d/file/xinpin/452214b5930752f61039756c8dc70d67.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;这是崔斯特的第六十一篇原创文章&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;记录自己对多线程的理解  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="多线程" scheme="https://zhangslob.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="https://zhangslob.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>为什么Selenium点不到元素</title>
    <link href="https://zhangslob.github.io/2018/07/24/%E4%B8%BA%E4%BB%80%E4%B9%88Selenium%E7%82%B9%E4%B8%8D%E5%88%B0%E5%85%83%E7%B4%A0/"/>
    <id>https://zhangslob.github.io/2018/07/24/为什么Selenium点不到元素/</id>
    <published>2018-07-24T14:35:10.000Z</published>
    <updated>2018-07-24T15:28:58.537Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/VfFKTnl.jpg" alt=""></p>
<pre><code>这是崔斯特的第六十篇原创文章
</code></pre><p>明明可以显示，为什么就是点不到呢  (๑• . •๑)</p>
<a id="more"></a>
<p>最近做了许多登陆项目，我会优先选择使用requests来模拟请求，但是有些参数实在是很难获取，这个时候我会使用Selenium，也还是遇到了各种坑，也算是见识到了很多的验证措施。</p>
<p>今天说说如何解决selenium点选不到数据的问题。</p>
<h1 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h1><p>这还是最常见的一种情况，推荐最多的是使用显示等待：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</div><div class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</div><div class="line"></div><div class="line">driver = webdriver.Firefox()</div><div class="line">driver.get(<span class="string">"http://somedomain/url_that_delay_loading"</span>)</div><div class="line"><span class="keyword">try</span>:</div><div class="line">    element = WebDriverWait(driver,<span class="number">10</span>).until(</div><div class="line">        EC.presence_of_element_located((By.ID,<span class="string">"myDynamicElement"</span>))</div><div class="line">    )</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    driver.quit()</div></pre></td></tr></table></figure>
<p>这段代码会等待10秒，如果10秒内找到元素则立即返回，否则会抛出TimeoutException异常。</p>
<p>但是我比较懒，因为<code>time.sleep()</code>可以达到同样效果。</p>
<h1 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h1><p>官方把它叫做“行为链”。ActionChains可以完成简单的交互行为，例如鼠标移动，鼠标点击事件，键盘输入，以及内容菜单交互。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">click(on_element=None) ——单击鼠标左键</div><div class="line"></div><div class="line">click_and_hold(on_element=None) ——点击鼠标左键，不松开</div><div class="line"></div><div class="line">context_click(on_element=None) ——点击鼠标右键</div><div class="line"></div><div class="line">double_click(on_element=None) ——双击鼠标左键</div><div class="line"></div><div class="line">drag_and_drop(<span class="built_in">source</span>, target) ——拖拽到某个元素然后松开</div><div class="line"></div><div class="line">drag_and_drop_by_offset(<span class="built_in">source</span>, xoffset, yoffset) ——拖拽到某个坐标然后松开</div><div class="line"></div><div class="line">key_down(value, element=None) ——按下某个键盘上的键</div><div class="line"></div><div class="line">key_up(value, element=None) ——松开某个键</div><div class="line"></div><div class="line">move_by_offset(xoffset, yoffset) ——鼠标从当前位置移动到某个坐标</div><div class="line"></div><div class="line">move_to_element(to_element) ——鼠标移动到某个元素</div><div class="line"></div><div class="line">move_to_element_with_offset(to_element, xoffset, yoffset) ——移动到距某个元素（左上角坐标）多少距离的位置</div><div class="line"></div><div class="line">perform() ——执行链中的所有动作</div><div class="line"></div><div class="line">release(on_element=None) ——在某个元素位置松开鼠标左键</div><div class="line"></div><div class="line">send_keys(*keys_to_send) ——发送某个键到当前焦点的元素</div><div class="line"></div><div class="line">send_keys_to_element(element, *keys_to_send) ——发送某个键到指定元素</div></pre></td></tr></table></figure>
<p>深入了解可以参考 <a href="https://blog.csdn.net/huilan_same/article/details/52305176" target="_blank" rel="external">https://blog.csdn.net/huilan_same/article/details/52305176</a></p>
<p><code>move_to_element_with_offset</code>和<code>click_and_hold</code>会经常用到破解验证码中。</p>
<h1 id="触摸操作-TouchAction"><a href="#触摸操作-TouchAction" class="headerlink" title="触摸操作 (TouchAction)"></a>触摸操作 (TouchAction)</h1><p><strong>该事件仅仅针对移动端、触屏版</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">flick_element(on_element, xoffset, yoffset, speed) <span class="comment"># 以元素为起点以一定速度向下滑动</span></div><div class="line">scroll_from_element(on_element xoffset yoffset) <span class="comment">#以元素为起点向下滑动</span></div><div class="line">double_tap(on_element)                                     <span class="comment">#双击   </span></div><div class="line">flick_element(on_element, xoffset, yoffset, speed)         <span class="comment">#从元素开始以指定的速度移动</span></div><div class="line">long_press(on_element)　　                                          <span class="comment">#长按不释放</span></div><div class="line">move(xcoord, ycoord)　　                                              <span class="comment">#移动到指定的位置</span></div><div class="line">perform()　　                                                                  <span class="comment">#执行链中的所有动作</span></div><div class="line">release(xcoord, ycoord)　　                                           <span class="comment">#在某个位置松开操作</span></div><div class="line">scroll(xoffset, yoffset)                                                      <span class="comment">#滚动到某个位置</span></div><div class="line">scroll_from_element(on_element, xoffset, yoffset)         <span class="comment">#从某元素开始滚动到某个位置</span></div><div class="line">tap(on_element)                                                             <span class="comment">#单击</span></div><div class="line">tap_and_hold(xcoord, ycoord)                                        <span class="comment">#某点按住</span></div></pre></td></tr></table></figure>
<p>为什么要说到移动端，在做登陆时，移动端往往会更加简单，但是触屏版的点击和PC端时完全不同的，点击与按住时不同的。</p>
<p>在某个项目我换成<code>TouchAction</code>后，神奇的发现，注册不再需要处理验证码了，真是太棒了。</p>
<h1 id="使用js"><a href="#使用js" class="headerlink" title="使用js"></a>使用js</h1><p>当你使用浏览器已经找到该元素，使用<code>click()</code>方法但是不起作用时，这个时候建议尝试js，例如在我的主页 <a href="https://www.zhihu.com/people/cuishite/activities，点击" target="_blank" rel="external">https://www.zhihu.com/people/cuishite/activities，点击</a> “查看详细资料”</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">js = <span class="string">'document.getElementsByClassName("Button ProfileHeader-expandButton Button--plain")[0].click();'</span></div><div class="line">driver.execute_script(js)</div></pre></td></tr></table></figure>
<p>你可以先在控制台调试</p>
<p><img src="https://i.imgur.com/kyz089A.png" alt=""></p>
<p>js通常可以解决绝大多是问题，如果还是解决不了，那你可能和我遇到了同样的问题，比如说，我在处理某移动端网站登陆，处理如下验证码时，我会使用到<code>move_to_element_with_offset</code>，该方法是“移动到距某个元素（左上角坐标）多少距离的位置”。</p>
<p>计算出坐标后，会调用该方法，如<code>action.move_to_element_with_offset(element, width, height).click().perform()</code>，然而实际上问题并没有这么简单，多次点击失效。具体的有时间再说。</p>
<p><img src="https://i.imgur.com/5KXib4o.png" alt=""></p>
<h1 id="实用方法"><a href="#实用方法" class="headerlink" title="实用方法"></a>实用方法</h1><p><strong>提取selenium的cookies</strong></p>
<p>介绍把selenium的cookies船体给requests使用的方法：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cookies = driver.get_cookies()</div><div class="line"></div><div class="line">s = requests.Session()</div><div class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> cookies:</div><div class="line">    s.cookies.set(cookie[<span class="string">'name'</span>], cookie[<span class="string">'value'</span>])</div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/29563335/how-do-i-load-session-and-cookies-from-selenium-browser-to-requests-library-in-p" target="_blank" rel="external">How do I load session and cookies from Selenium browser to requests library in Python?</a></p>
<p><strong>元素截图方法</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">fox = webdriver.Firefox()</div><div class="line">fox.get(<span class="string">'https://stackoverflow.com/'</span>)</div><div class="line"></div><div class="line"><span class="comment"># now that we have the preliminary stuff out of the way time to get that image :D</span></div><div class="line">element = fox.find_element_by_id(<span class="string">'hlogo'</span>) <span class="comment"># find part of the page you want image of</span></div><div class="line">location = element.location</div><div class="line">size = element.size</div><div class="line">fox.save_screenshot(<span class="string">'screenshot.png'</span>) <span class="comment"># saves screenshot of entire page</span></div><div class="line">fox.quit()</div><div class="line"></div><div class="line">im = Image.open(<span class="string">'screenshot.png'</span>) <span class="comment"># uses PIL library to open image in memory</span></div><div class="line"></div><div class="line">left = location[<span class="string">'x'</span>]</div><div class="line">top = location[<span class="string">'y'</span>]</div><div class="line">right = location[<span class="string">'x'</span>] + size[<span class="string">'width'</span>]</div><div class="line">bottom = location[<span class="string">'y'</span>] + size[<span class="string">'height'</span>]</div><div class="line"></div><div class="line"></div><div class="line">im = im.crop((left, top, right, bottom)) <span class="comment"># defines crop points</span></div><div class="line">im.save(<span class="string">'screenshot.png'</span>) <span class="comment"># saves new cropped image</span></div></pre></td></tr></table></figure>
<p><a href="https://stackoverflow.com/questions/37564932/selenium-cannot-screenshot-a-web-element" target="_blank" rel="external">selenium cannot screenshot a web element</a></p>
<p>最后推荐一个神器 <a href="https://github.com/appium/python-client" target="_blank" rel="external">appium/python-client</a></p>
<p>至于验证码部分，现在主要还是靠第三方工具，并没有自己尝试机器学习等方法处理。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VfFKTnl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这是崔斯特的第六十篇原创文章
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;明明可以显示，为什么就是点不到呢  (๑• . •๑)&lt;/p&gt;
    
    </summary>
    
      <category term="Selenium" scheme="https://zhangslob.github.io/categories/Selenium/"/>
    
    
      <category term="Selenium" scheme="https://zhangslob.github.io/tags/Selenium/"/>
    
  </entry>
  
</feed>
